name: deployment-to-development-environment
author: "Rufet Mezemov"
description: "Deploy to development environment"
inputs:
  java-distribution:
    description: "Java distribution to use"
    required: false
    default: "temurin"
  java-version:
    description: "Java version to use"
    required: false
    default: "17"
  cache:
    description: "Build tool caching"
    required: false
    default: "true"
  gradle-version:
    description: "Gradle version"
    required: false
    default: "wrapper"
  azure-version:
    description: "Azure version to use"
    required: false
    default: "v1.23.6"
  repository:
    description: "Infra helm chat repository"
    required: false
    default: "infra-helm-chart"
  ref:
    description: "Helm chart repository"
    required: false
    default: "master"
  path:
    description: "Helm chart path"
    required: false
    default: "infra-helm-chart"

runs:
  using: composite
  steps:
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}

    - name: Build the application
      uses: gradle/gradle-build-action@v2
      env:
        GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true
      with:
        gradle-version: ${{ inputs.gradle-version }}
        arguments: bootJar
        cache-read-only: false

    - name: Change backend config and environment variables
      run: |
        echo "${{ secrets.CONTEXT_DEV }}" >> $GITHUB_ENV
        echo "${{ secrets.CONTEXT_DEV }}" | sed 's/\(.*\)=/::add-mask::/' | sed 's/\"//g'

    - uses: azure/setup-kubectl@v2.0
      with:
        version: ${{ inputs.azure-version }}
      id: install

    - name: Use dev kubectl context
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_DEV }}
      run: |
        mkdir ~/.kube
        echo $KUBE_CONFIG_DATA | base64 --decode > ~/.kube/config

    - name: Install AWS IAM
      uses: woofenator/action-aws-iam-authenticator@master
      id: install-aws-iam

    - name: Get Helm chart from Git repository
      uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        path: ${{ inputs.path }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR Repository if does not exists
      run: aws ecr create-repository --repository-name ${{ env.APP_NAME }} || true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.APP_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Helm template
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.APP_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: >
        helm template ./infra-helm-chart/k8s-helm-chart/
        -f ./infra-helm-chart/k8s-helm-chart/dev/values.yaml
        -f ./infra/values-ms.yaml
        --set clusterEnvironment="dev"
        --set serviceImage="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > release.yaml

    - name: Apply release YAML script to Kubernetes
      run: kubectl apply -f release.yaml