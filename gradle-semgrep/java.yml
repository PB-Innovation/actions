rules:
  - id: java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify
    message: Detected the decoding of a JWT token without a verify step. JWT tokens
      must be verified before use, otherwise the token's integrity is unknown. This
      means a malicious actor could forge a JWT token with any claims. Call '.verify()'
      before using the token.
    metadata:
      cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify
      shortlink: https://sg.run/Bk95
      dev.semgrep.actions: &id001 []
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    patterns:
      - pattern: |
          com.auth0.jwt.JWT.decode(...);
      - pattern-not-inside: |-
          class $CLASS {
            ...
            $RETURNTYPE $FUNC (...) {
              ...
              $VERIFIER.verify(...);
              ...
            }
          }
  - id: java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret
    message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables)'
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret
      shortlink: https://sg.run/RoDK
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: ERROR
    pattern-either:
      - pattern: |
          com.auth0.jwt.algorithms.Algorithm.HMAC256("...");
      - pattern: |
          $SECRET = "...";
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC256($SECRET);
      - pattern: |
          class $CLASS {
            ...
            $TYPE $SECRET = "...";
            ...
            $RETURNTYPE $FUNC (...) {
              ...
              com.auth0.jwt.algorithms.Algorithm.HMAC256($SECRET);
              ...
            }
            ...
          }
      - pattern: |
          com.auth0.jwt.algorithms.Algorithm.HMAC384("...");
      - pattern: |
          $SECRET = "...";
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC384($SECRET);
      - pattern: |
          class $CLASS {
            ...
            $TYPE $SECRET = "...";
            ...
            $RETURNTYPE $FUNC (...) {
              ...
              com.auth0.jwt.algorithms.Algorithm.HMAC384($SECRET);
              ...
            }
            ...
          }
      - pattern: |
          com.auth0.jwt.algorithms.Algorithm.HMAC512("...");
      - pattern: |
          $SECRET = "...";
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC512($SECRET);
      - pattern: |
          class $CLASS {
            ...
            $TYPE $SECRET = "...";
            ...
            $RETURNTYPE $FUNC (...) {
              ...
              com.auth0.jwt.algorithms.Algorithm.HMAC512($SECRET);
              ...
            }
            ...
          }
  - id: java.java-jwt.security.jwt-none-alg.java-jwt-none-alg
    message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
      assumes the integrity of the token has already been verified. This would allow
      a malicious actor to forge a JWT token that will automatically be verified. Do
      not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
    metadata:
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.java-jwt.security.jwt-none-alg.java-jwt-none-alg
      shortlink: https://sg.run/Av14
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.java-jwt.security.jwt-none-alg.java-jwt-none-alg
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: ERROR
    pattern-either:
      - pattern: |
          $JWT.sign(com.auth0.jwt.algorithms.Algorithm.none());
      - pattern: |
          $NONE = com.auth0.jwt.algorithms.Algorithm.none();
          ...
          $JWT.sign($NONE);
      - pattern: |-
          class $CLASS {
            ...
            $TYPE $NONE = com.auth0.jwt.algorithms.Algorithm.none();
            ...
            $RETURNTYPE $FUNC (...) {
              ...
              $JWT.sign($NONE);
              ...
            }
            ...
          }
  - id: java.jax-rs.security.insecure-resteasy.insecure-resteasy-deserialization
    severity: WARNING
    languages:
      - java
    metadata:
      cwe: 'CWE-502: Deserialization of Untrusted Data'
      owasp: 'A8: Insecure Deserialization'
      references:
        - https://access.redhat.com/blogs/766093/posts/3162112
      category: security
      technology:
        - jax-rs
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.jax-rs.security.insecure-resteasy.insecure-resteasy-deserialization
      shortlink: https://sg.run/XLBN
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.jax-rs.security.insecure-resteasy.insecure-resteasy-deserialization
      semgrep.ruleset: owasp-top-ten
    message: When a Restful webservice endpoint is configured to use wildcard mediaType
      {*/*} as a value for the @Consumes annotation, an attacker could abuse the SerializableProvider
      by sending a HTTP Request with a Content-Type of application/x-java-serialized-object.
      The body of that request would be processed by the SerializationProvider and could
      contain a malicious payload, which may lead to arbitrary code execution when calling
      the $Y.getObject method.
    pattern-either:
      - pattern: |
          @Consumes({"application/x-java-serialized-object"})
      - pattern: |
          @Consumes({"*/*"})
      - pattern: |
          @Consumes("*/*")
      - pattern: |
          @Consumes({MediaType.WILDCARD_TYPE})
  - id: java.jax-rs.security.insecure-resteasy.default-resteasy-provider-abuse
    severity: WARNING
    languages:
      - java
    metadata:
      cwe: 'CWE-502: Deserialization of Untrusted Data'
      owasp: 'A8: Insecure Deserialization'
      references:
        - https://access.redhat.com/blogs/766093/posts/3162112
      category: security
      technology:
        - jax-rs
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.jax-rs.security.insecure-resteasy.default-resteasy-provider-abuse
      shortlink: https://sg.run/jNRD
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.jax-rs.security.insecure-resteasy.default-resteasy-provider-abuse
      semgrep.ruleset: owasp-top-ten
    message: When a Restful webservice endpoint isn't configured with a @Consumes annotation,
      an attacker could abuse the SerializableProvider by sending a HTTP Request with
      a Content-Type of application/x-java-serialized-object. The body of that request
      would be processed by the SerializationProvider and could contain a malicious
      payload, which may lead to arbitrary code execution.
    patterns:
      - pattern: |
          @Path("...")
          public $RETURNTYPE $METHOD(...) { ...}
      - pattern-not-inside: |
          @Path("...")
          @Consumes(...)
          public $RETURNTYPE $METHOD(...) { ...}
  - id: java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
      references:
        - https://www.owasp.org/index.php/Path_Traversal
      category: security
      technology:
        - jax-rs
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal
      shortlink: https://sg.run/DoWj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal
      semgrep.ruleset: owasp-top-ten
    message: Detected a potential path traversal. A malicious actor could control the
      location of this file, to include going backwards in the directory with '../'.
      To address this, ensure that user-controlled variables in file paths are sanitized.
      You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...)
      to only retrieve the file name from the path.
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: |
          $RETURNTYPE $FUNC (..., @PathParam(...) $TYPE $VAR, ...) {
            ...
            new File(..., $VAR, ...);
            ...
          }
      - pattern: |-
          $RETURNTYPE $FUNC (..., @javax.ws.rs.PathParam(...) $TYPE $VAR, ...) {
            ...
            new File(..., $VAR, ...);
            ...
          }
  - id: java.jboss.security.seam-log-injection.seam-log-injection
    patterns:
      - pattern: |
          $LOG.$INFO($X + $Y,...)
      - pattern-either:
          - pattern-inside: |
              import org.jboss.seam.log.Log;
              ...
          - pattern-inside: |
              org.jboss.seam.log.Log $LOG = ...;
              ...
      - metavariable-regex:
          metavariable: $INFO
          regex: (debug|error|fatal|info|trace|warn)
    languages:
      - java
    message: Seam Logging API support an expression language to introduce bean property
      to log messages. The expression language can also be the source to unwanted code
      execution. In this context, an expression is built with a dynamic value. The source
      of the value(s) should be verified to avoid that unfiltered values fall into this
      risky code evaluation.
    metadata:
      cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SEAM_LOG_INJECTION
      category: security
      technology:
        - jboss
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.jboss.security.seam-log-injection.seam-log-injection
      shortlink: https://sg.run/3A4o
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.jboss.security.seam-log-injection.seam-log-injection
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
  - id: java.jjwt.security.jwt-none-alg.jjwt-none-alg
    message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
      assumes the integrity of the token has already been verified. This would allow
      a malicious actor to forge a JWT token that will automatically be verified. Do
      not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
    metadata:
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.jjwt.security.jwt-none-alg.jjwt-none-alg
      shortlink: https://sg.run/0Q7b
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.jjwt.security.jwt-none-alg.jjwt-none-alg
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: ERROR
    patterns:
      - pattern: |
          io.jsonwebtoken.Jwts.builder();
      - pattern-not-inside: |-
          $RETURNTYPE $FUNC(...) {
            ...
            $JWTS.signWith(...);
            ...
          }
  - id: java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind
    metadata:
      cwe: 'CWE-287: Improper Authentication'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind
      shortlink: https://sg.run/jR6A
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind
      semgrep.ruleset: owasp-top-ten
    message: Detected anonymous LDAP bind. This permits anonymous users to execute LDAP
      statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html
      for more information.
    severity: WARNING
    pattern: |
      $ENV.put($CTX.SECURITY_AUTHENTICATION, "none");
      ...
      $DCTX = new InitialDirContext($ENV, ...);
    languages:
      - java
  - id: java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
    metadata:
      cwe: 'CWE-704: Incorrect Type Conversion or Cast'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
      shortlink: https://sg.run/1Z7D
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
      semgrep.ruleset: owasp-top-ten
    message: '''Integer.toHexString()'' strips leading zeroes from each byte if read
    byte-by-byte. This mistake weakens the hash value computed since it introduces
    more collisions. Use ''String.format("%02X", ...)'' instead.'
    severity: WARNING
    languages:
      - java
    pattern: |-
      $X $METHOD(...) {
        ...
        MessageDigest $MD = ...;
        ...
        $MD.digest(...);
        ...
        Integer.toHexString(...);
      }
  - id: java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size
    metadata:
      cwe: 'CWE-326: Inadequate Encryption Strength'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size
      shortlink: https://sg.run/9o74
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size
      semgrep.ruleset: owasp-top-ten
    message: Using less than 128 bits for Blowfish is considered insecure. Use 128 bits
      or more, or switch to use AES instead.
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern: |
          $KEYGEN = KeyGenerator.getInstance("Blowfish");
          ...
          $KEYGEN.init($SIZE);
      - metavariable-comparison:
          metavariable: $SIZE
          comparison: $SIZE < 128
  - id: java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
    message: Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A
      malicious actor could discern the difference between plaintext with valid or invalid
      padding. Further, CBC mode does not include any integrity checks. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
      Use 'AES/GCM/NoPadding' instead.
    metadata:
      cwe: 'CWE-696: Incorrect Behavior Order'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE
      references:
        - https://capec.mitre.org/data/definitions/463.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
      shortlink: https://sg.run/ydxr
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    fix: $CIPHER.getInstance("AES/GCM/NoPadding");
    languages:
      - java
    pattern: $CIPHER.getInstance("=~/.*\/CBC\/PKCS5Padding/");
  - id: java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
    patterns:
      - pattern-either:
          - pattern: $RUNTIME.exec($X + $Y);
          - pattern: $RUNTIME.exec(String.format(...));
          - pattern: $RUNTIME.loadLibrary($X + $Y);
          - pattern: $RUNTIME.loadLibrary(String.format(...));
          - patterns:
              - pattern-either:
                  - pattern: |
                      $RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
                  - pattern: |
                      $RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
                  - pattern: |
                      $RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
                  - patterns:
                      - pattern-either:
                          - pattern: |
                              $RUNTIME.exec($CMD,"-c",$ARG,...)
                          - pattern: |
                              $RUNTIME.exec(Arrays.asList($CMD,"-c",$ARG,...),...)
                          - pattern: |
                              $RUNTIME.exec(new String[]{$CMD,"-c",$ARG,...},...)
                      - pattern-inside: |
                          $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
                          ...
              - pattern-not-inside: |
                  $ARG = "...";
                  ...
              - pattern-not: |
                  $RUNTIME.exec("...","...","...",...)
              - pattern-not: |
                  $RUNTIME.exec(new String[]{"...","...","...",...},...)
              - pattern-not: |
                  $RUNTIME.exec(Arrays.asList("...","...","...",...),...)
      - pattern-inside: |
          $TYPE $RUNTIME = Runtime.getRuntime(...);
          ...
    message: A formatted or concatenated string was detected as input to a java.lang.Runtime
      call. This is dangerous if a variable is controlled by user input and could result
      in a command injection. Ensure your variables are not controlled by users or sufficiently
      sanitized.
    metadata:
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
      shortlink: https://sg.run/rd90
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
  - id: java.lang.security.audit.command-injection-process-builder.command-injection-process-builder
    pattern-either:
      - patterns:
          - pattern: |
              new ProcessBuilder($CMD,...)
          - pattern-not-inside: |
              $CMD = "...";
              ...
          - pattern-not-inside: |
              $CMD = Arrays.asList("...",...);
              ...
          - pattern-not-inside: |
              $CMD = new String[]{"...",...};
              ...
          - pattern-not: |
              new ProcessBuilder("...",...)
          - pattern-not: |
              new ProcessBuilder(new String[]{"...",...},...)
          - pattern-not: |
              new ProcessBuilder(Arrays.asList("...",...),...)
      - patterns:
          - pattern: |
              $PB.command($CMD,...)
          - pattern-inside: |
              $TYPE $PB = new ProcessBuilder(...);
              ...
          - pattern-not-inside: |
              $CMD = "...";
              ...
          - pattern-not-inside: |
              $CMD = Arrays.asList("...",...);
              ...
          - pattern-not-inside: |
              $CMD = new String[]{"...",...};
              ...
          - pattern-not: |
              $PB.command("...",...)
          - pattern-not: |
              $PB.command(new String[]{"...",...},...)
          - pattern-not: |
              $PB.command(Arrays.asList("...",...),...)
      - patterns:
          - pattern-either:
              - pattern: |
                  new ProcessBuilder("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
              - pattern: |
                  new ProcessBuilder(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
              - pattern: |
                  new ProcessBuilder(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
              - patterns:
                  - pattern-either:
                      - pattern: |
                          new ProcessBuilder($CMD,"-c",$ARG,...)
                      - pattern: |
                          new ProcessBuilder(Arrays.asList($CMD,"-c",$ARG,...),...)
                      - pattern: |
                          new ProcessBuilder(new String[]{$CMD,"-c",$ARG,...},...)
                  - pattern-inside: |
                      $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
                      ...
          - pattern-not-inside: |
              $ARG = "...";
              ...
          - pattern-not: |
              new ProcessBuilder("...","...","...",...)
          - pattern-not: |
              new ProcessBuilder(new String[]{"...","...","...",...},...)
          - pattern-not: |
              new ProcessBuilder(Arrays.asList("...","...","...",...),...)
      - patterns:
          - pattern-either:
              - pattern: |
                  $PB.command("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
              - pattern: |
                  $PB.command(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
              - pattern: |
                  $PB.command(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
              - patterns:
                  - pattern-either:
                      - pattern: |
                          $PB.command($CMD,"-c",$ARG,...)
                      - pattern: |
                          $PB.command(Arrays.asList($CMD,"-c",$ARG,...),...)
                      - pattern: |
                          $PB.command(new String[]{$CMD,"-c",$ARG,...},...)
                  - pattern-inside: |
                      $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
                      ...
          - pattern-inside: |
              $TYPE $PB = new ProcessBuilder(...);
              ...
          - pattern-not-inside: |
              $ARG = "...";
              ...
          - pattern-not: |
              $PB.command("...","...","...",...)
          - pattern-not: |
              $PB.command(new String[]{"...","...","...",...},...)
          - pattern-not: |
              $PB.command(Arrays.asList("...","...","...",...),...)
    message: A formatted or concatenated string was detected as input to a ProcessBuilder
      call. This is dangerous if a variable is controlled by user input and could result
      in a command injection. Ensure your variables are not controlled by users or sufficiently
      sanitized.
    metadata:
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
      owasp: 'A1: Injection'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder
      shortlink: https://sg.run/gJJe
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
  - id: java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly
    metadata:
      cwe: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.4.2 Missing Cookie Attribute
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly
      shortlink: https://sg.run/b7Be
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly
      semgrep.ruleset: owasp-top-ten
    message: A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly'
      flag for cookies instructs the browser to forbid client-side scripts from reading
      the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-not-inside: $COOKIE.setValue(""); ...
      - pattern-either:
          - pattern: $COOKIE.setHttpOnly(false);
          - patterns:
              - pattern-not-inside: $COOKIE.setHttpOnly(...); ...
              - pattern: $RESPONSE.addCookie($COOKIE);
  - id: java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite
    metadata:
      cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
      owasp: 'A6: Security Misconfiguration'
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.4.3 Missing Cookie Attribute
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
        version: '4'
      references:
        - https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite
      shortlink: https://sg.run/N427
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite
      semgrep.ruleset: owasp-top-ten
    message: Detected cookie without the SameSite attribute.
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-not-inside: |
          $RETURNTYPE $METHOD(..., HttpServletResponse $RESP, ...) {
            ...
            $RESP.setHeader("Set-Cookie", "=~/.*SameSite=.*/");
            ...
          }
      - pattern-either:
          - pattern: $RESP.addCookie(...);
          - pattern: $RESP.setHeader("Set-Cookie", ...);
  - id: java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
    metadata:
      cwe: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.4.1 Missing Cookie Attribute
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
      shortlink: https://sg.run/kXoK
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
      semgrep.ruleset: owasp-top-ten
    message: A cookie was detected without setting the 'secure' flag. The 'secure' flag
      for cookies prevents the client from transmitting the cookie over insecure channels
      such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-not-inside: $COOKIE.setValue(""); ...
      - pattern-either:
          - pattern: $COOKIE.setSecure(false);
          - patterns:
              - pattern-not-inside: $COOKIE.setSecure(...); ...
              - pattern: $RESPONSE.addCookie($COOKIE);
  - id: java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
    message: When data from an untrusted source is put into a logger and not neutralized
      correctly, an attacker could forge log entries or include malicious content.
    metadata:
      cwe: 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
      shortlink: https://sg.run/wek0
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  class $CLASS {
                    ...
                    Logger $LOG = ...;
                    ...
                  }
              - pattern-either:
                  - pattern-inside: |
                      $X $METHOD(...,HttpServletRequest $REQ,...) {
                        ...
                      }
                  - pattern-inside: |
                      $X $METHOD(...,ServletRequest $REQ,...) {
                        ...
                      }
                  - pattern-inside: |
                      $X $METHOD(...) {
                        ...
                        HttpServletRequest $REQ = ...;
                        ...
                      }
                  - pattern-inside: |
                      $X $METHOD(...) {
                        ...
                        ServletRequest $REQ = ...;
                        ...
                      }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                Logger $LOG = ...;
                ...
                HttpServletRequest $REQ = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                Logger $LOG = ...;
                ...
                ServletRequest $REQ = ...;
                ...
              }
      - pattern-either:
          - pattern: |
              String $VAL = $REQ.getParameter(...);
              ...
              $LOG.$LEVEL(<... $VAL ...>);
          - pattern: |
              String $VAL = $REQ.getParameter(...);
              ...
              $LOG.log($LEVEL,<... $VAL ...>);
          - pattern: |
              $LOG.$LEVEL(<... $REQ.getParameter(...) ...>);
          - pattern: |
              $LOG.log($LEVEL,<... $REQ.getParameter(...) ...>);
  - id: java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated
    message: Triple DES (3DES or DESede) is considered deprecated. AES is the recommended
      cipher. Upgrade to use AES. See https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA
      for more information.
    metadata:
      cwe: 'CWE-326: Inadequate Encryption Strength'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      references:
        - https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated
      shortlink: https://sg.run/Geqn
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    pattern: $CIPHER.getInstance("=~/DESede.*/");
    fix: Cipher.getInstance("AES/GCM/NoPadding");
    languages:
      - java
  - id: java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
    message: DES is considered deprecated. AES is the recommended cipher. Upgrade to
      use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
      for more information.
    metadata:
      cwe: 'CWE-326: Inadequate Encryption Strength'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DES_USAGE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      references:
        - https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
      shortlink: https://sg.run/5Q73
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    pattern: $CIPHER.getInstance("=~/DES/.*/");
    fix: $CIPHER.getInstance("AES/GCM/NoPadding");
    languages:
      - java
  - id: java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
    metadata:
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#ECB_MODE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
      shortlink: https://sg.run/Ro9K
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
      semgrep.ruleset: owasp-top-ten
    message: Cipher in ECB mode is detected. ECB mode produces the same output for the
      same input each time which allows an attacker to intercept and replay the data.
      Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern: |
          Cipher $VAR = $CIPHER.getInstance($MODE);
      - metavariable-regex:
          metavariable: $MODE
          regex: .*ECB.*
  - id: java.lang.security.audit.crypto.no-null-cipher.no-null-cipher
    pattern: new NullCipher(...);
    metadata:
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher
      shortlink: https://sg.run/AvA4
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher
      semgrep.ruleset: owasp-top-ten
    message: 'NullCipher was detected. This will not encrypt anything; the cipher text
    will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING").
    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for
    more information.'
    severity: WARNING
    languages:
      - java
  - id: java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector
    message: Initialization Vectors (IVs) for block ciphers should be randomly generated
      each time they are used. Using a static IV means the same plaintext encrypts to
      the same ciphertext every time, weakening the strength of the encryption.
    metadata:
      cwe: 'CWE-329: Not Using a Random IV with CBC Mode'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#STATIC_IV
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      references:
        - https://cwe.mitre.org/data/definitions/329.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector
      shortlink: https://sg.run/BkB5
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: |
          byte[] $IV = {
              ...
          };
          ...
          new IvParameterSpec($IV, ...);
      - pattern: |
          class $CLASS {
              byte[] $IV = {
                  ...
              };
              ...
              $METHOD(...) {
                  ...
                  new IvParameterSpec($IV, ...);
                  ...
              }
          }
  - id: java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding
    metadata:
      cwe: 'CWE-326: Inadequate Encryption Strength'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING
      references:
        - https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding
      shortlink: https://sg.run/DoOj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding
      semgrep.ruleset: owasp-top-ten
    message: Using RSA without OAEP mode weakens the encryption.
    severity: WARNING
    languages:
      - java
    pattern: $CIPHER.getInstance("RSA/NONE/NoPadding")
  - id: java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests
    metadata:
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CUSTOM_MESSAGE_DIGEST
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.2 Insecure Custom Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests
      shortlink: https://sg.run/PJ0p
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests
      semgrep.ruleset: owasp-top-ten
    message: 'Cryptographic algorithms are notoriously difficult to get right. By implementing
    a custom message digest, you risk introducing security issues into your program.
    Use one of the many sound message digests already available to you: MessageDigest
    sha256Digest = MessageDigest.getInstance("SHA256");'
    severity: WARNING
    languages:
      - java
    pattern: |-
      class $CLASS extends MessageDigest {
        ...
      }
  - id: java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
    metadata:
      cwe: 'CWE-326: Inadequate Encryption Strength'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DEFAULT_HTTP_CLIENT
      asvs:
        section: V9 Communications Verification Requirements
        control_id: 9.1.3 Weak TLS
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
      shortlink: https://sg.run/J9Gj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
      semgrep.ruleset: owasp-top-ten
    message: DefaultHttpClient is deprecated. Further, it does not support connections
      using TLS1.2, which makes using DefaultHttpClient a security hazard. Use SystemDefaultHttpClient
      instead, which supports TLS1.2.
    severity: WARNING
    languages:
      - java
    pattern: new DefaultHttpClient(...);
    fix-regex:
      regex: DefaultHttpClient
      replacement: SystemDefaultHttpClient
  - id: java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier
    message: Insecure HostnameVerifier implementation detected. This will accept any
      SSL certificate with any hostname, which creates the possibility for man-in-the-middle
      attacks.
    metadata:
      cwe: 'CWE-295: Improper Certificate Validation'
      owasp: 'A6: Security Misconfiguration'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER
      asvs:
        section: V9 Communications Verification Requirements
        control_id: 9.2.1 Weak TLS
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier
      shortlink: https://sg.run/5QoD
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: |
          class $CLASS implements HostnameVerifier {
            ...
            public boolean verify(...) { return true; }
          }
      - pattern: |-
          new HostnameVerifier(...){
            public boolean verify(...) {
              return true;
            }
          }
      - pattern: import org.apache.http.conn.ssl.NoopHostnameVerifier;
  - id: java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager
    metadata:
      cwe: 'CWE-295: Improper Certificate Validation'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER
      asvs:
        section: V9 Communications Verification Requirements
        control_id: 9.2.1 Weak TLS
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
        version: '4'
      references:
        - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager
      shortlink: https://sg.run/GePy
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager
      semgrep.ruleset: owasp-top-ten
    message: Detected empty trust manager implementations. This is dangerous because
      it accepts any certificate, enabling man-in-the-middle attacks. Consider using
      a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https
      for more information.
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-either:
          - pattern-inside: |
              class $CLASS implements X509TrustManager {
                ...
              }
          - pattern-inside: |
              new X509TrustManager() {
                ...
              }
          - pattern-inside: |
              class $CLASS implements X509ExtendedTrustManager {
                ...
              }
          - pattern-inside: |
              new X509ExtendedTrustManager() {
                ...
              }
      - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }
      - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }
      - pattern-either:
          - pattern: public void checkClientTrusted(...) {}
          - pattern: public void checkServerTrusted(...) {}
          - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }
  - id: java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
    metadata:
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
      shortlink: https://sg.run/W8zA
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
      semgrep.ruleset: owasp-top-ten
    message: This socket is not encrypted. The traffic could be read by an attacker
      intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory'
      or 'SSLServerSocketFactory' instead
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: new ServerSocket(...)
      - pattern: new Socket(...)
  - id: java.lang.security.audit.crypto.weak-hash.use-of-sha1
    message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
      collision resistant and is therefore not suitable as a cryptographic signature.
      Use SHA256 or SHA3 instead.
    languages:
      - java
    severity: WARNING
    metadata:
      owasp: 'A9: Using Components with Known Vulnerabilities'
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-hash.use-of-sha1
      shortlink: https://sg.run/0QKb
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-hash.use-of-sha1
      semgrep.ruleset: owasp-top-ten
    pattern-either:
      - pattern: |
          MessageDigest $VAR = $MD.getInstance("SHA1");
      - pattern: |
          $DU.getSha1Digest().digest(...)
  - id: java.lang.security.audit.crypto.weak-hash.use-of-md5
    message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
      resistant and is therefore not suitable as a cryptographic signature. Use SHA256
      or SHA3 instead.
    languages:
      - java
    severity: WARNING
    metadata:
      owasp: 'A9: Using Components with Known Vulnerabilities'
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-hash.use-of-md5
      shortlink: https://sg.run/KlRd
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-hash.use-of-md5
      semgrep.ruleset: owasp-top-ten
    pattern-either:
      - pattern: |
          MessageDigest $VAR = $MD.getInstance("MD5");
      - pattern: |
          $DU.getMd5Digest().digest(...)
  - id: java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
    message: RSA keys should be at least 2048 bits based on NIST recommendation.
    languages:
      - java
    severity: WARNING
    metadata:
      cwe: 'CWE-326: Inadequate Encryption Strength'
      owasp: 'A3: Sensitive Data Exposure'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE
      asvs:
        section: V6 Stored Cryptography Verification Requirements
        control_id: 6.2.5 Insecure Algorithm
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
        version: '4'
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
      shortlink: https://sg.run/4x6x
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern: |
          KeyPairGenerator $KEY = $G.getInstance("RSA");
          ...
          $KEY.initialize($BITS);
      - metavariable-comparison:
          metavariable: $BITS
          comparison: $BITS < 2048
  - id: java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell
    patterns:
      - pattern-either:
          - pattern: |
              $SHELL.parse(...)
          - pattern: |
              $SHELL.evaluate(...)
          - pattern: |
              $SHELL.parseClass(...)
      - pattern-either:
          - pattern-inside: |
              groovy.lang.GroovyShell $SHELL = ...;
              ...
          - pattern-inside: |
              groovy.lang.GroovyClassLoader $SHELL = ...;
              ...
      - pattern-not: |
          $SHELL.parse("...",...)
      - pattern-not: |
          $SHELL.evaluate("...",...)
      - pattern-not: |
          $SHELL.parseClass("...",...)
    message: A expression is built with a dynamic value. The source of the value(s)
      should be verified to avoid that unfiltered values fall into this risky code evaluation.
    metadata:
      cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#GROOVY_SHELL
      category: security
      technology:
        - groovy
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell
      shortlink: https://sg.run/58LK
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
  - id: java.lang.security.audit.el-injection.el-injection
    metadata:
      cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#EL_INJECTION
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection
      shortlink: https://sg.run/x1wp
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection
      semgrep.ruleset: owasp-top-ten
    message: An expression is built with a dynamic value. The source of the value(s)
      should be verified to avoid that unfiltered values fall into this risky code evaluation.
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-either:
          - pattern: |
              class $CLASS {
                ...
                ExpressionFactory $EF;
                ...
                $X $METHOD(...) {
                  ...
                  $EF.createValueExpression($CTX,$INPUT,...);
                  ...
                }
                ...
              }
          - pattern: |
              class $CLASS {
                ...
                ExpressionFactory $EF = ...;
                ...
                $X $METHOD(...) {
                  ...
                  $EF.createValueExpression($CTX,$INPUT,...);
                  ...
                }
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ExpressionFactory $EF = ...;
                ...
                $EF.createValueExpression($CTX,$INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ExpressionFactory $EF,...) {
                ...
                $EF.createValueExpression($CTX,$INPUT,...);
                ...
              }
          - pattern: |
              class $CLASS {
                ...
                ExpressionFactory $EF;
                ...
                $X $METHOD(...) {
                  ...
                  $EF.createMethodExpression($CTX,$INPUT,...);
                  ...
                }
                ...
              }
          - pattern: |
              class $CLASS {
                ...
                ExpressionFactory $EF = ...;
                ...
                $X $METHOD(...) {
                  ...
                  $EF.createMethodExpression($CTX,$INPUT,...);
                  ...
                }
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ExpressionFactory $EF = ...;
                ...
                $EF.createMethodExpression($CTX,$INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ExpressionFactory $EF,...) {
                ...
                $EF.createMethodExpression($CTX,$INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(String $INPUT, ...) {
                ...
                $OBJECT.buildConstraintViolationWithTemplate($INPUT, ...);
                ...
              }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $EF.createValueExpression($CTX,"...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $EF.createValueExpression($CTX,$S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $EF.createMethodExpression($CTX,"...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $EF.createMethodExpression($CTX,$S,...);
            ...
          }
  - id: java.lang.security.audit.formatted-sql-string.formatted-sql-string
    metadata:
      cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION
      asvs:
        section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
        control_id: 5.3.5 Injection
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
        version: '4'
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
        - https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps
        - https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string
      shortlink: https://sg.run/OPXp
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string
      semgrep.ruleset: owasp-top-ten
    message: Detected a formatted string in a SQL statement. This could lead to SQL
      injection if variables in the SQL statement are not properly sanitized. Use a
      prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
      using 'connection.prepareStatement'.
    patterns:
      - pattern-not: $W.execute(<... "=~/.*TABLE *$/" ...>);
      - pattern-not: $W.execute(<... "=~/.*TABLE %s$/" ...>);
      - pattern-either:
          - pattern: $W.execute($X + $Y, ...);
          - pattern: |
              String $SQL = $X + $Y;
              ...
              $W.execute($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += $Y;
              ...
              $W.execute($SQL, ...);
          - pattern: $W.execute(String.format($X, ...), ...);
          - pattern: |
              String $SQL = String.format($X, ...);
              ...
              $W.execute($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += String.format(...);
              ...
              $W.execute($SQL, ...);
          - pattern: $W.executeQuery($X + $Y, ...);
          - pattern: |
              String $SQL = $X + $Y;
              ...
              $W.executeQuery($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += $Y;
              ...
              $W.executeQuery($SQL, ...);
          - pattern: $W.executeQuery(String.format($X, ...), ...);
          - pattern: |
              String $SQL = String.format($X, ...);
              ...
              $W.executeQuery($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += String.format(...);
              ...
              $W.executeQuery($SQL, ...);
          - pattern: $W.createQuery($X + $Y, ...);
          - pattern: |
              String $SQL = $X + $Y;
              ...
              $W.createQuery($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += $Y;
              ...
              $W.createQuery($SQL, ...);
          - pattern: $W.createQuery(String.format($X, ...), ...);
          - pattern: |
              String $SQL = String.format($X, ...);
              ...
              $W.createQuery($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += String.format(...);
              ...
              $W.createQuery($SQL, ...);
          - pattern: $W.query($X + $Y, ...);
          - pattern: |
              String $SQL = $X + $Y;
              ...
              $W.query($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += $Y;
              ...
              $W.query($SQL, ...);
          - pattern: $W.query(String.format($X, ...), ...);
          - pattern: |
              String $SQL = String.format($X, ...);
              ...
              $W.query($SQL, ...);
          - pattern: |
              String $SQL = $X;
              ...
              $SQL += String.format(...);
              ...
              $W.query($SQL, ...);
    severity: WARNING
    languages:
      - java
  - id: java.lang.security.audit.http-response-splitting.http-response-splitting
    metadata:
      cwe: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Response Splitting'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTP_RESPONSE_SPLITTING
      references:
        - https://www.owasp.org/index.php/HTTP_Response_Splitting
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting
      shortlink: https://sg.run/eL0l
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting
      semgrep.ruleset: owasp-top-ten
    message: Older Java application servers are vulnerable to HTTP response splitting,
      which may occur if an HTTP request can be injected with CRLF characters. This
      finding is reported for completeness; it is recommended to ensure your environment
      is not affected by testing this yourself.
    severity: INFO
    languages:
      - java
    pattern-either:
      - pattern: |
          $VAR = $REQ.getParameter(...);
          ...
          $COOKIE = new Cookie(..., $VAR, ...);
          ...
          $RESP.addCookie($COOKIE, ...);
      - patterns:
          - pattern-inside: |
              $RETTYPE $FUNC(...,@PathVariable $TYPE $VAR, ...) {
                ...
              }
          - pattern: |
              $COOKIE = new Cookie(..., $VAR, ...);
              ...
              $RESP.addCookie($COOKIE, ...);
  - id: java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection
    metadata:
      cwe: 'CWE-297: Improper Validation of Certificate with Host Mismatch'
      owasp: 'A6: Security Misconfiguration'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_SMTP_SSL
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection
      shortlink: https://sg.run/vzN4
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection
      semgrep.ruleset: owasp-top-ten
    message: Insecure SMTP connection detected. This connection will trust any SSL certificate.
      Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.
    severity: WARNING
    patterns:
      - pattern-not-inside: |
          $EMAIL.setSSLCheckServerIdentity(true);
          ...
      - pattern-inside: |
          $EMAIL = new SimpleEmail(...);
          ...
      - pattern: $EMAIL.send(...);
    languages:
      - java
  - id: java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string
    metadata:
      cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION_SPRING_JDBC
      asvs:
        section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
        control_id: 5.3.5 Injection
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
        version: '4'
      category: security
      technology:
        - jdbc
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string
      shortlink: https://sg.run/dKWY
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string
      semgrep.ruleset: owasp-top-ten
    message: 'Possible JDBC injection detected. Use the parameterized query feature
    available in queryForObject instead of concatenating or formatting strings: ''jdbc.queryForObject("select
    * from table where name = ?", Integer.class, parameterName);'''
    patterns:
      - pattern-inside: |
          $JDBC = new JdbcTemplate(...);
          ...
      - pattern-either:
          - pattern: $JDBC.queryForObject($STR + $VAR, ...);
          - pattern: $JDBC.queryForObject(String.format(...), ...);
          - pattern: |
              String $Q = $STR + $VAR;
              ...
              $JDBC.queryForObject($Q, ...);
          - pattern: |
              String $Q = String.format(...);
              ...
              $JDBC.queryForObject($Q, ...);
          - pattern: |
              StringBuilder $Q = new StringBuilder(...);
              ...
              $Q.append($STR + $VAR);
              ...
              $JDBC.queryForObject($Q, ...);
          - pattern: $JDBC.queryForList($STR + $VAR);
          - pattern: $JDBC.queryForList(String.format(...));
          - pattern: |
              String $Q = $STR + $VAR;
              ...
              $JDBC.queryForList($Q);
          - pattern: |
              String $Q = String.format(...);
              ...
              $JDBC.queryForList($Q);
          - pattern: |
              StringBuilder $Q = new StringBuilder(...);
              ...
              $Q.append($STR + $VAR);
              ...
              $JDBC.queryForList($Q, ...);
          - pattern: $JDBC.update($STR + $VAR);
          - pattern: $JDBC.update(String.format(...));
          - pattern: |
              String $Q = $STR + $VAR;
              ...
              $JDBC.update($Q);
          - pattern: |
              String $Q = String.format(...);
              ...
              $JDBC.update($Q);
          - pattern: |
              StringBuilder $Q = new StringBuilder(...);
              ...
              $Q.append($STR + $VAR);
              ...
              $JDBC.update($Q, ...);
          - pattern: $JDBC.execute($STR + $VAR);
          - pattern: $JDBC.execute(String.format(...));
          - pattern: |
              String $Q = $STR + $VAR;
              ...
              $JDBC.execute($Q);
          - pattern: |
              String $Q = String.format(...);
              ...
              $JDBC.execute($Q);
          - pattern: |
              StringBuilder $Q = new StringBuilder(...);
              ...
              $Q.append($STR + $VAR);
              ...
              $JDBC.execute($Q, ...);
          - pattern: $JDBC.insert($STR + $VAR);
          - pattern: $JDBC.insert(String.format(...));
          - pattern: |
              String $Q = $STR + $VAR;
              ...
              $JDBC.insert($Q);
          - pattern: |
              String $Q = String.format(...);
              ...
              $JDBC.insert($Q);
          - pattern: |
              StringBuilder $Q = new StringBuilder(...);
              ...
              $Q.append($STR + $VAR);
              ...
              $JDBC.insert($Q, ...);
    severity: WARNING
    languages:
      - java
  - id: java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (''LDAP Injection'')'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING
      asvs:
        section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
        control_id: 5.3.7 Injection
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
        version: '4'
      references:
        - https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf
        - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning
      shortlink: https://sg.run/ZvOn
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning
      semgrep.ruleset: owasp-top-ten
    message: An object-returning LDAP search will allow attackers to control the LDAP
      response. This could lead to Remote Code Execution.
    severity: WARNING
    pattern-either:
      - pattern: |
          new SearchControls($S, $CL, $TL, $AT, true, $DEREF)
      - pattern: |
          SearchControls $VAR = new SearchControls();
          ...
          $VAR.setReturningObjFlag(true);
    languages:
      - java
  - id: java.lang.security.audit.ldap-injection.ldap-injection
    message: Detected non-constant data passed into an LDAP query. If this data can
      be controlled by an external user, this is an LDAP injection. Ensure data passed
      to an LDAP query is not controllable; or properly sanitize the data.
    metadata:
      cwe: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query
      (''LDAP Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_INJECTION
      asvs:
        section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
        control_id: 5.3.7 Injection
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.ldap-injection.ldap-injection
      shortlink: https://sg.run/nd2O
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.ldap-injection.ldap-injection
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-either:
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                InitialDirContext $CTX = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                DirContext $CTX = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                InitialLdapContext $CTX = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                LdapContext $CTX = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                LdapCtx $CTX = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                EventDirContext $CTX = ...;
                ...
              }
      - pattern: |
          $X $METHOD(...) {
            ...
            $CTX.search($Y,$INPUT,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $CTX.search($Y,"...",...);
            ...
          }
  - id: java.lang.security.audit.object-deserialization.object-deserialization
    metadata:
      cwe: 'CWE-502: Deserialization of Untrusted Data'
      owasp: 'A8: Insecure Deserialization'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION
      references:
        - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
        - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization
      shortlink: https://sg.run/Ek0A
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization
      semgrep.ruleset: owasp-top-ten
    message: Found object deserialization using ObjectInputStream. Deserializing entire
      Java objects is dangerous because malicious actors can create Java object streams
      with unintended consequences. Ensure that the objects being deserialized are not
      user-controlled. If this must be done, consider using HMACs to sign the data stream
      to make sure it is not tampered with, or consider only transmitting object fields
      and populating a new object.
    severity: WARNING
    languages:
      - java
    pattern: new ObjectInputStream(...);
  - id: java.lang.security.audit.ognl-injection.ognl-injection
    message: A expression is built with a dynamic value. The source of the value(s)
      should be verified to avoid that unfiltered values fall into this risky code evaluation.
    metadata:
      cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OGNL_INJECTION
      category: security
      technology:
        - ognl
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.ognl-injection.ognl-injection
      shortlink: https://sg.run/7o7R
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.ognl-injection.ognl-injection
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-either:
          - pattern: |
              $X $METHOD(...,OgnlReflectionProvider $P,...) {
                ...
                $P.getGetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlReflectionProvider $P,...) {
                ...
                $P.getSetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlReflectionProvider $P,...) {
                ...
                $P.getField($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlReflectionProvider $P,...) {
                ...
                $P.setProperties($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlReflectionProvider $P,...) {
                ...
                $P.setProperty($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlReflectionProvider $P,...) {
                ...
                $P.getValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlReflectionProvider $P,...) {
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ReflectionProvider $P,...) {
                ...
                $P.getGetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ReflectionProvider $P,...) {
                ...
                $P.getSetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ReflectionProvider $P,...) {
                ...
                $P.getField($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ReflectionProvider $P,...) {
                ...
                $P.setProperties($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ReflectionProvider $P,...) {
                ...
                $P.setProperty($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ReflectionProvider $P,...) {
                ...
                $P.getValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ReflectionProvider $P,...) {
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,TextParseUtil $P,...) {
                ...
                $P.translateVariables($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,TextParseUtil $P,...) {
                ...
                $P.translateVariablesCollection($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,TextParseUtil $P,...) {
                ...
                $P.shallBeIncluded($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,TextParseUtil $P,...) {
                ...
                $P.commaDelimitedStringToSet($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,TextParser $P,...) {
                ...
                $P.evaluate($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlTextParser $P,...) {
                ...
                $P.evaluate($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlUtil $P,...) {
                ...
                $P.setProperties($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlUtil $P,...) {
                ...
                $P.setProperty($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlUtil $P,...) {
                ...
                $P.getValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlUtil $P,...) {
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlUtil $P,...) {
                ...
                $P.callMethod($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlUtil $P,...) {
                ...
                $P.compile($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,VelocityStrutsUtil $P,...) {
                ...
                $P.evaluate($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,StrutsUtil $P,...) {
                ...
                $P.isTrue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,StrutsUtil $P,...) {
                ...
                $P.findString($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,StrutsUtil $P,...) {
                ...
                $P.findValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,StrutsUtil $P,...) {
                ...
                $P.getText($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,StrutsUtil $P,...) {
                ...
                $P.translateVariables($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,StrutsUtil $P,...) {
                ...
                $P.makeSelectList($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,OgnlTool $P,...) {
                ...
                $P.findValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ValueStack $P,...) {
                ...
                $P.findString($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ValueStack $P,...) {
                ...
                $P.findValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ValueStack $P,...) {
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...,ValueStack $P,...) {
                ...
                $P.setParameter($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlReflectionProvider $P = ...;
                ...
                $P.getGetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlReflectionProvider $P = ...;
                ...
                $P.getSetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlReflectionProvider $P = ...;
                ...
                $P.getField($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlReflectionProvider $P = ...;
                ...
                $P.setProperties($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlReflectionProvider $P = ...;
                ...
                $P.setProperty($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlReflectionProvider $P = ...;
                ...
                $P.getValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlReflectionProvider $P = ...;
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ReflectionProvider $P = ...;
                ...
                $P.getGetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ReflectionProvider $P = ...;
                ...
                $P.getSetMethod($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ReflectionProvider $P = ...;
                ...
                $P.getField($T, $INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ReflectionProvider $P = ...;
                ...
                $P.setProperties($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ReflectionProvider $P = ...;
                ...
                $P.setProperty($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ReflectionProvider $P = ...;
                ...
                $P.getValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ReflectionProvider $P = ...;
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                TextParseUtil $P = ...;
                ...
                $P.translateVariables($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                TextParseUtil $P = ...;
                ...
                $P.translateVariablesCollection($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                TextParseUtil $P = ...;
                ...
                $P.shallBeIncluded($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                TextParseUtil $P = ...;
                ...
                $P.commaDelimitedStringToSet($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                TextParser $P = ...;
                ...
                $P.evaluate($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlTextParser $P = ...;
                ...
                $P.evaluate($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlUtil $P = ...;
                ...
                $P.setProperties($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlUtil $P = ...;
                ...
                $P.setProperty($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlUtil $P = ...;
                ...
                $P.getValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlUtil $P = ...;
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlUtil $P = ...;
                ...
                $P.callMethod($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlUtil $P = ...;
                ...
                $P.compile($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                VelocityStrutsUtil $P = ...;
                ...
                $P.evaluate($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                StrutsUtil $P = ...;
                ...
                $P.isTrue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                StrutsUtil $P = ...;
                ...
                $P.findString($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                StrutsUtil $P = ...;
                ...
                $P.findValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                StrutsUtil $P = ...;
                ...
                $P.getText($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                StrutsUtil $P = ...;
                ...
                $P.translateVariables($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                StrutsUtil $P = ...;
                ...
                $P.makeSelectList($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                OgnlTool $P = ...;
                ...
                $P.findValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ValueStack $P = ...;
                ...
                $P.findString($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ValueStack $P = ...;
                ...
                $P.findValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ValueStack $P = ...;
                ...
                $P.setValue($INPUT,...);
                ...
              }
          - pattern: |
              $X $METHOD(...) {
                ...
                ValueStack $P = ...;
                ...
                $P.setParameter($INPUT,...);
                ...
              }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.getGetMethod($T,"...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.getSetMethod($T,"...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.getField($T,"...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.setProperties("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.setProperty("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.getValue("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.setValue("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.translateVariables("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.translateVariablesCollection("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.shallBeIncluded("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.commaDelimitedStringToSet("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.evaluate("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.callMethod("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.compile("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.isTrue("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.findString("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.findValue("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.getText("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.makeSelectList("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $P.setParameter("...",...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.getGetMethod($T,$S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.getSetMethod($T,$S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.getField($T,$S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.setProperties($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.setProperty($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.getValue($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.setValue($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.translateVariables($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.translateVariablesCollection($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.shallBeIncluded($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.commaDelimitedStringToSet($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.evaluate($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.callMethod($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.compile($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.isTrue($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.findString($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.findValue($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.getText($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.makeSelectList($S,...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $P.setParameter($S,...);
            ...
          }
  - id: java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission
    message: It is generally a bad practices to set overly permissive file permission
      such as read+write+exec for all users. If the file affected is a configuration,
      a binary, a script or sensitive data, it can lead to privilege escalation or information
      leakage.
    severity: WARNING
    languages:
      - java
    metadata:
      cwe: 'CWE-276: Incorrect Default Permissions'
      owasp: 'A6: Security Misconfiguration'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OVERLY_PERMISSIVE_FILE_PERMISSION
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission
      shortlink: https://sg.run/LwzJ
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission
      semgrep.ruleset: owasp-top-ten
    pattern-either:
      - pattern: java.nio.file.Files.setPosixFilePermissions($FILE, java.nio.file.attribute.PosixFilePermissions.fromString("=~/(^......r..$)|(^.......w.$)|(^........x$)/"));
      - pattern: |
          $TYPE $P = java.nio.file.attribute.PosixFilePermissions.fromString("=~/(^......r..$)|(^.......w.$)|(^........x$)/");
          ...
          java.nio.file.Files.setPosixFilePermissions($FILE, $P);
      - pattern: |
          $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_READ);
          ...
          java.nio.file.Files.setPosixFilePermissions($FILE, $P);
      - pattern: |
          $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_WRITE);
          ...
          java.nio.file.Files.setPosixFilePermissions($FILE, $P);
      - pattern: |-
          $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_EXECUTE);
          ...
          java.nio.file.Files.setPosixFilePermissions($FILE, $P);
  - id: java.lang.security.audit.script-engine-injection.script-engine-injection
    message: Detected potential code injection using ScriptEngine. Ensure user-controlled
      data cannot enter '.eval()', otherwise, this is a code injection vulnerability.
    metadata:
      cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SCRIPT_ENGINE_INJECTION
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection
      shortlink: https://sg.run/gLqn
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-either:
          - pattern-inside: |
              class $CLASS {
                ...
                ScriptEngine $SE;
                ...
              }
          - pattern-inside: |
              class $CLASS {
                ...
                ScriptEngine $SE = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                ScriptEngine $SE = ...;
                ...
              }
      - pattern: |
          $X $METHOD(...) {
            ...
            $SE.eval(...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $SE.eval("...");
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $SE.eval($S);
            ...
          }
  - id: java.lang.security.audit.unsafe-reflection.unsafe-reflection
    patterns:
      - pattern: |
          Class.forName($CLASS,...)
      - pattern-not: |
          Class.forName("...",...)
      - pattern-not-inside: |
          $CLASS = "...";
          ...
    message: If an attacker can supply values that the application then uses to determine
      which class to instantiate or which method to invoke, the potential exists for
      the attacker to create control flow paths through the application that were not
      intended by the application developers. This attack vector may allow the attacker
      to bypass authentication or access control checks or otherwise cause the application
      to behave in an unexpected manner.
    metadata:
      cwe: 'CWE-470: Use of Externally-Controlled Input to Select Classes or Code (''Unsafe
      Reflection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.unsafe-reflection.unsafe-reflection
      shortlink: https://sg.run/R8X8
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.unsafe-reflection.unsafe-reflection
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
  - id: java.lang.security.audit.unvalidated-redirect.unvalidated-redirect
    message: Application redirects to a destination URL specified by a user-supplied
      parameter that is not validated. This could direct users to malicious locations.
      Consider using an allowlist to validate URLs.
    metadata:
      cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT
      asvs:
        section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
        control_id: 5.1.5 Open Redirect
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation-requirements
        version: '4'
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect
      shortlink: https://sg.run/Q51P
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...,String $URL,...) {
            ...
            $RES.sendRedirect($URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,String $URL,...,HttpServletResponse $RES,...) {
            ...
            $RES.sendRedirect($URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
            ...
            String $URL = $REQ.getParameter(...);
            ...
            $RES.sendRedirect($URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
            ...
            String $URL = $REQ.getParameter(...);
            ...
            $RES.sendRedirect($URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,String $URL,...) {
            ...
            HttpServletResponse $RES = ...;
            ...
            $RES.sendRedirect($URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
            ...
            $RES.sendRedirect($REQ.getParameter(...));
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
            ...
            $RES.sendRedirect($REQ.getParameter(...));
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...,String $URL,...) {
            ...
            $RES.addHeader("Location",$URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,String $URL,...,HttpServletResponse $RES,...) {
            ...
            $RES.addHeader("Location",$URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
            ...
            String $URL = $REQ.getParameter(...);
            ...
            $RES.addHeader("Location",$URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
            ...
            String $URL = $REQ.getParameter(...);
            ...
            $RES.addHeader("Location",$URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,String $URL,...) {
            ...
            HttpServletResponse $RES = ...;
            ...
            $RES.addHeader("Location",$URL);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
            ...
            $RES.addHeader("Location",$REQ.getParameter(...));
            ...
          }
      - pattern: |-
          $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
            ...
            $RES.addHeader("Location",$REQ.getParameter(...));
            ...
          }
  - id: java.lang.security.audit.url-rewriting.url-rewriting
    message: URL rewriting has significant security risks. Since session ID appears
      in the URL, it may be easily seen by third parties.
    metadata:
      cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URL_REWRITING
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.url-rewriting.url-rewriting
      shortlink: https://sg.run/3x7b
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.url-rewriting.url-rewriting
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...) {
            ...
            $RES.encodeURL(...);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...) {
            ...
            $RES.encodeUrl(...);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...) {
            ...
            $RES.encodeRedirectURL(...);
            ...
          }
      - pattern: |
          $X $METHOD(...,HttpServletResponse $RES,...) {
            ...
            $RES.encodeRedirectUrl(...);
            ...
          }
      - pattern: |
          $X $METHOD(...) {
            ...
            HttpServletResponse $RES = ...;
            ...
            $RES.encodeURL(...);
            ...
          }
      - pattern: |
          $X $METHOD(...) {
            ...
            HttpServletResponse $RES = ...;
            ...
            $RES.encodeUrl(...);
            ...
          }
      - pattern: |
          $X $METHOD(...) {
            ...
            HttpServletResponse $RES = ...;
            ...
            $RES.encodeRedirectURL(...);
            ...
          }
      - pattern: |-
          $X $METHOD(...) {
            ...
            HttpServletResponse $RES = ...;
            ...
            $RES.encodeRedirectUrl(...);
            ...
          }
  - id: java.lang.security.audit.weak-ssl-context.weak-ssl-context
    metadata:
      cwe: 'CWE-326: Inadequate Encryption Strength'
      owasp: 'A3: Sensitive Data Exposure'
      source_rule_url: https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT
      references:
        - https://tools.ietf.org/html/rfc7568
        - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context
      shortlink: https://sg.run/4x7E
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context
      semgrep.ruleset: owasp-top-ten
    message: An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL
      versions are considered weak encryption and are deprecated. Use SSLContext.getInstance("TLSv1.2")
      for the best security.
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-not: SSLContext.getInstance("TLSv1.3")
      - pattern-not: SSLContext.getInstance("TLSv1.2")
      - pattern: SSLContext.getInstance("...")
    fix-regex:
      regex: (.*?)\.getInstance\(.*?\)
      replacement: \1.getInstance("TLSv1.2")
  - id: java.lang.security.audit.xml-decoder.xml-decoder
    message: XMLDecoder should not be used to parse untrusted data. Deserializing user
      input can lead to arbitrary code execution. Use an alternative and explicitly
      disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
      for alternatives and vulnerability prevention.
    metadata:
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      owasp: 'A4: XML External Entities (XXE)'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XML_DECODER
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.xml-decoder.xml-decoder
      shortlink: https://sg.run/PJjq
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.xml-decoder.xml-decoder
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern: |
          $X $METHOD(...) {
            ...
            new XMLDecoder(...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            new XMLDecoder("...");
            ...
          }
      - pattern-not: |-
          $X $METHOD(...) {
            ...
            String $STR = "...";
            ...
            new XMLDecoder($STR);
            ...
          }
  - id: java.lang.security.audit.xss.jsf.autoescape-disabled.autoescape-disabled
    message: Detected an element with disabled HTML escaping. If external data can reach
      this, this is a cross-site scripting (XSS) vulnerability. Ensure no external data
      can reach here, or remove 'escape=false' from this element.
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences'
      references:
        - https://stackoverflow.com/a/7442668
      category: security
      technology:
        - jsf
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.xss.jsf.autoescape-disabled.autoescape-disabled
      shortlink: https://sg.run/qxne
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.xss.jsf.autoescape-disabled.autoescape-disabled
      semgrep.ruleset: owasp-top-ten
    pattern-regex: .*escape.*?=.*?false.*
    paths:
      include:
        - '*.html'
        - '*.xhtml'
    languages:
      - regex
    severity: WARNING
  - id: java.lang.security.audit.xss.jsp.no-scriptlets.no-scriptlets
    message: JSP scriptlet detected. Scriptlets are difficult to use securely and are
      considered bad practice. See https://stackoverflow.com/a/3180202. Instead, consider
      migrating to JSF or using the Expression Language '${...}' with the escapeXml
      function in your JSP files.
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-116: Improper Encoding or Escaping of Output'
      references:
        - https://stackoverflow.com/a/3180202
        - https://stackoverflow.com/a/4948856
      category: security
      technology:
        - jsp
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.xss.jsp.no-scriptlets.no-scriptlets
      shortlink: https://sg.run/l2LG
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.xss.jsp.no-scriptlets.no-scriptlets
      semgrep.ruleset: owasp-top-ten
    pattern-regex: \<\%[^\@].*
    paths:
      include:
        - '*.jsp'
    languages:
      - regex
    severity: WARNING
  - id: java.lang.security.audit.xss.jsp.use-escapexml.use-escapexml
    message: Detected an Expression Language segment that does not escape output. This
      is dangerous because if any data in this expression can be controlled externally,
      it is a cross-site scripting vulnerability. Instead, use the 'escapeXml' function
      from the JSTL taglib. See https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm
      for more information.
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-116: Improper Encoding or Escaping of Output'
      references:
        - https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm
        - https://stackoverflow.com/a/4948856
        - https://stackoverflow.com/a/3180202
      category: security
      technology:
        - jsp
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.xss.jsp.use-escapexml.use-escapexml
      shortlink: https://sg.run/Yv2o
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.xss.jsp.use-escapexml.use-escapexml
      semgrep.ruleset: owasp-top-ten
    pattern-regex: \$\{(?!.*escapeXml).*\}
    paths:
      include:
        - '*.jsp'
    languages:
      - regex
    severity: WARNING
  - id: java.lang.security.audit.xss.jsp.use-jstl-escaping.use-jstl-escaping
    message: Detected an Expression Language segment in a tag that does not escape output.
      This is dangerous because if any data in this expression can be controlled externally,
      it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the
      JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm
      for more information.
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-116: Improper Encoding or Escaping of Output'
      references:
        - https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm
        - https://stackoverflow.com/a/4948856
        - https://stackoverflow.com/a/3180202
      category: security
      technology:
        - jsp
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.xss.jsp.use-jstl-escaping.use-jstl-escaping
      shortlink: https://sg.run/6nzL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.xss.jsp.use-jstl-escaping.use-jstl-escaping
      semgrep.ruleset: owasp-top-ten
    pattern-regex: <(?![A-Za-z0-9]+:out).*?\$\{.*?\}.*>
    paths:
      include:
        - '*.jsp'
    languages:
      - regex
    severity: WARNING
  - id: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
    patterns:
      - pattern-either:
          - pattern-inside: |
              $RETURN $METHOD(..., HttpServletResponse $RESP, ...) { ... }
          - pattern-inside: |
              HttpServletResponse $RESPONSE = ...;
              ...
      - pattern-either:
          - pattern: |
              (HttpServletResponse $RESPONSE).getWriter(...).$WRITE(...)
          - pattern: |
              (HttpServletResponse $RESPONSE).getOutputStream(...).$WRITE(...)
          - pattern: |
              (PrintWriter $WRITER).$WRITE(...)
          - pattern: |
              (ServletOutputStream $WRITER).$WRITE(...)
          - pattern: |
              (OutputStream $WRITER).$WRITE(...)
      - pattern-not: $WRITER.$WRITE("...", ...)
      - pattern-not: $WRITER.flush(...)
      - pattern-not: $WRITER.close(...)
    message: Detected a direct write to the HTTP response. This bypasses any view or
      template environments, including HTML escaping, which may expose this application
      to cross-site scripting (XSS) vulnerabilities. Consider using a view technology
      such as JavaServer Faces (JSFs) which automatically escapes HTML views.
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-116: Improper Encoding or Escaping of Output'
      references:
        - https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
      shortlink: https://sg.run/KlRL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
  - id: java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_REQUEST_WRAPPER
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure
      shortlink: https://sg.run/J96Q
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure
      semgrep.ruleset: owasp-top-ten
    message: It looks like you're using an implementation of XSSRequestWrapper from
      dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html)
      The XSS filtering in this code is not secure and can be bypassed by malicious
      actors. It is recommended to use a stack that automatically escapes in your view
      or templates instead of filtering yourself.
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: |
          class XSSRequestWrapper extends HttpServletRequestWrapper {
            ...
          }
      - pattern: |-
          $P = $X.compile("</script>", $X.CASE_INSENSITIVE);
          $V = $P.matcher(...).replaceAll("");
  - id: java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
    metadata:
      cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
      references:
        - https://www.owasp.org/index.php/Path_Traversal
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
      shortlink: https://sg.run/oxXN
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
      semgrep.ruleset: owasp-top-ten
    message: Detected a potential path traversal. A malicious actor could control the
      location of this file, to include going backwards in the directory with '../'.
      To address this, ensure that user-controlled variables in file paths are sanitized.
      You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...)
      to only retrieve the file name from the path.
    patterns:
      - pattern-inside: |
          $RETURNTYPE $FUNC (..., HttpServletRequest $REQ, ...) {
            ...
          }
      - pattern-either:
          - pattern: |
              $VAR = ($TYPE)$REQ.getParameter(...);
              ...
              new File(..., $VAR, ...);
          - pattern: |
              $VAR = $REQ.getParameter(...);
              ...
              new File(..., $VAR, ...);
    severity: ERROR
    languages:
      - java
  - id: java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization
    severity: WARNING
    languages:
      - java
    metadata:
      cwe: 'CWE-502: Deserialization of Untrusted Data'
      owasp: 'A8: Insecure Deserialization'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.3 Insecue Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: '4'
      references:
        - https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization
      shortlink: https://sg.run/zvO1
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization
      semgrep.ruleset: owasp-top-ten
    message: JMS Object messages depend on Java Serialization for marshalling/unmarshalling
      of the message payload when ObjectMessage.getObject() is called. Deserialization
      of untrusted data can lead to security flaws; a remote attacker could via a crafted
      JMS ObjectMessage to execute arbitrary code with the permissions of the application
      listening/consuming JMS Messages. In this case, the JMS MessageListener consume
      an ObjectMessage type received inside the onMessage method, which may lead to
      arbitrary code execution when calling the $Y.getObject method.
    patterns:
      - pattern-inside: |
          public class $JMS_LISTENER implements MessageListener {
            ...
            public void onMessage(Message $JMS_MSG) {
                ...
            }
          }
      - pattern-either:
          - pattern-inside: $X = $Y.getObject(...);
          - pattern-inside: $X = ($Z) $Y.getObject(...);
  - id: java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss
    message: 'Cross-site scripting detected in HttpServletResponse writer with variable
    ''$VAR''. User input was detected going directly from the HttpServletRequest into
    output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml:
    ''Encode.forHtml($VAR)''.'
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss
      shortlink: https://sg.run/pxjN
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    patterns:
      - pattern-inside: $TYPE $FUNC(..., HttpServletResponse $RESP, ...) { ... }
      - pattern-inside: $VAR = $REQ.getParameter(...); ...
      - pattern-either:
          - pattern: $RESP.getWriter(...).write(..., $VAR, ...);
          - pattern: |
              $WRITER = $RESP.getWriter(...);
              ...
              $WRITER.write(..., $VAR, ...);
    languages:
      - java
  - id: java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled
    severity: ERROR
    metadata:
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      owasp: 'A4: XML External Entities (XXE)'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.2 Insecue XML Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: '4'
      references:
        - https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled
      shortlink: https://sg.run/2x75
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled
      semgrep.ruleset: owasp-top-ten
    message: XML external entities are enabled for this XMLInputFactory. This is vulnerable
      to XML external entity attacks. Disable external entities by setting "javax.xml.stream.isSupportingExternalEntities"
      to false.
    pattern: $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities",
      true);
    languages:
      - java
  - id: java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe
    severity: WARNING
    metadata:
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      owasp: 'A4: XML External Entities (XXE)'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.2 Insecue XML Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: '4'
      references:
        - https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf
        - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe
      shortlink: https://sg.run/XBwA
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe
      semgrep.ruleset: owasp-top-ten
    message: XML external entities are not explicitly disabled for this XMLInputFactory.
      This could be vulnerable to XML external entity vulnerabilities. Explicitly disable
      external entities by setting "javax.xml.stream.isSupportingExternalEntities" to
      false.
    patterns:
      - pattern-not-inside: |
          $RETURNTYPE $METHOD(...) {
            ...
            $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
            ...
          }
      - pattern-not-inside: |
          $RETURNTYPE $METHOD(...) {
            ...
            $XMLFACTORY.setProperty(java.xml.stream.XMLFactoryInput.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
            ...
          }
      - pattern-either:
          - pattern: $XMLFACTORY = $W.newFactory(...);
          - pattern: $XMLFACTORY = new XMLInputFactory(...);
    languages:
      - java
  - id: java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
    severity: WARNING
    languages:
      - java
    metadata:
      cwe: 'CWE-502: Deserialization of Untrusted Data'
      owasp: 'A8: Insecure Deserialization'
      references:
        - https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/
      category: security
      technology:
        - rmi
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
      shortlink: https://sg.run/oxg6
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
      semgrep.ruleset: owasp-top-ten
    message: Using a non-primitive class with Java RMI may be an insecure deserialization
      vulnerability. Depending on the underlying implementation. This object could be
      manipulated by a malicious actor allowing them to execute code on your system.
      Instead, use an integer ID to look up your object, or consider alternative serialization
      schemes such as JSON.
    patterns:
      - pattern: |
          interface $INTERFACE extends Remote {
            $RETURNTYPE $METHOD($CLASS $PARAM) throws RemoteException;
          }
      - metavariable-regex:
          metavariable: $CLASS
          regex: (?!int|boolean|short|long|byte|char|float|double)
  - id: java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization
    severity: ERROR
    metadata:
      cwe: 'CWE-502: Deserialization of Untrusted Data'
      owasp: 'A8: Insecure Deserialization'
      references:
        - https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/
        - https://frohoff.github.io/appseccali-marshalling-pickles/
      category: security
      technology:
        - rmi
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization
      shortlink: https://sg.run/zvnl
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization
      semgrep.ruleset: owasp-top-ten
    message: Using an arbitrary object ('Object $PARAM') with Java RMI is an insecure
      deserialization vulnerability. This object can be manipulated by a malicious actor
      allowing them to execute code on your system. Instead, use an integer ID to look
      up your object, or consider alternative serialization schemes such as JSON.
    languages:
      - java
    pattern: |
      interface $INTERFACE extends Remote {
        $RETURNTYPE $METHOD(Object $PARAM) throws RemoteException;
      }
  - id: javascript.bluebird.security.audit.tofastproperties-code-execution.tofastproperties-code-execution
    patterns:
      - pattern-either:
          - pattern: $UTIL.toFastProperties(...)
          - pattern: toFastProperties(...)
      - pattern-not: |
          $UTIL.toFastProperties("...",...)
      - pattern-not: |
          toFastProperties("...",...)
      - pattern-either:
          - pattern-inside: |
              $BB = require('bluebird');
              ...
          - pattern-inside: |
              import 'bluebird';
              ...
    message: Potential arbitrary code execution, whatever is provided to `toFastProperties`
      is sent straight to eval()
    metadata:
      cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
      owasp: 'A1: Injection'
      category: security
      technology:
        - bluebird
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.bluebird.security.audit.tofastproperties-code-execution.tofastproperties-code-execution
      shortlink: https://sg.run/ndnZ
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.bluebird.security.audit.tofastproperties-code-execution.tofastproperties-code-execution
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.browser.security.dom-based-xss.dom-based-xss
    pattern-either:
      - pattern: document.write(<... document.location.$W ...>)
      - pattern: document.write(<... location.$W ...>)
    message: 'Detected possible DOM-based XSS. This occurs because a portion of the
    URL is being used to construct an element added directly to the page. For example,
    a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script>
    which would add the script to the page. Consider allowlisting appropriate values
    or using an approach which does not involve the URL.'
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://owasp.org/www-community/attacks/DOM_Based_XSS
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.dom-based-xss.dom-based-xss
      shortlink: https://sg.run/EkeL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.dom-based-xss.dom-based-xss
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
  - id: javascript.browser.security.eval-detected.eval-detected
    patterns:
      - pattern-not: eval("...")
      - pattern: eval(...)
    message: Detected the use of eval(). eval() can be dangerous if used to evaluate
      dynamic content. If this content can be input from outside the program, this may
      be a code injection vulnerability. Ensure evaluated content is not definable by
      external sources.
    metadata:
      cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
      owasp: 'A1: Injection'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.2.4 Dynamic Code Execution Features
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing
        version: '4'
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected
      shortlink: https://sg.run/7ope
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.browser.security.insecure-document-method.insecure-document-method
    patterns:
      - pattern-either:
          - pattern: |
              $EL.innerHTML = $HTML;
          - pattern: |
              $EL.outerHTML = $HTML;
          - pattern: document.write(...)
      - pattern-not: |
          $EL.innerHTML = "...";
      - pattern-not: |
          $EL.outerHTML = "...";
      - pattern-not: document.write("...")
    message: User controlled data in methods like `innerHTML`, `outerHTML` or `document.write`
      is an anti-pattern that can lead to XSS vulnerabilities
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method
      shortlink: https://sg.run/LwA9
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.browser.security.insecure-innerhtml.insecure-innerhtml
    patterns:
      - pattern: |
          $EL.innerHTML = $HTML;
      - pattern-not: |
          $EL.innerHTML = "...";
    message: User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead
      to XSS vulnerabilities
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.insecure-innerhtml.insecure-innerhtml
      shortlink: https://sg.run/8y0q
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.insecure-innerhtml.insecure-innerhtml
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.browser.security.insufficient-postmessage-origin-validation.insufficient-postmessage-origin-validation
    pattern-either:
      - patterns:
          - pattern: |
              window.addEventListener('message', $FUNC, ...)
          - metavariable-pattern:
              metavariable: $FUNC
              patterns:
                - pattern: |
                    function($OBJ) { ... }
                - pattern-not: |
                    function($OBJ) { ... if (<... $OBJ.origin ...>) { ... } ... }
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  function $FNAME($OBJ) { $CONTEXT }
                  ...
              - pattern-inside: |
                  $FNAME = (...) => { $CONTEXT }
                  ...
          - pattern: |
              window.addEventListener('message', $FNAME,...)
          - metavariable-pattern:
              metavariable: $CONTEXT
              patterns:
                - pattern-not: |
                    ... if (<... $OBJ.origin ...>) { ... } ...
    message: No validation of origin is done by the addEventListener API. It may be
      possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site
      Scripting(XSS).
    languages:
      - javascript
      - typescript
    severity: WARNING
    metadata:
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.insufficient-postmessage-origin-validation.insufficient-postmessage-origin-validation
      shortlink: https://sg.run/gL9x
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.insufficient-postmessage-origin-validation.insufficient-postmessage-origin-validation
      semgrep.ruleset: owasp-top-ten
  - id: javascript.browser.security.new-function-detected.new-function-detected
    patterns:
      - pattern-not: |
          $FUNC = new Function('...');
          ...
          $FUNC();
      - pattern: |
          $FUNC = new Function(...);
          ...
          $FUNC();
    message: Detected the use of new Function(), which can be dangerous if used to evaluate
      dynamic content. If this content can be input from outside the program, this may
      be a code injection vulnerability. Ensure evaluated content is not definable by
      external sources.
    metadata:
      cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
      owasp: 'A1: Injection'
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.new-function-detected.new-function-detected
      shortlink: https://sg.run/Q5Pk
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.new-function-detected.new-function-detected
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.browser.security.open-redirect.js-open-redirect
    message: Possible open redirect
    metadata:
      cwe: 'CWE-601: URL Redirection to Untrusted Site (Open Redirect)'
      owasp: 'A1: Injection'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.1 Insecue Redirect
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
        version: '4'
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.open-redirect.js-open-redirect
      shortlink: https://sg.run/3xRe
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.open-redirect.js-open-redirect
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern: |
              window.location.replace($URL)
          - pattern: |
              location.replace($URL)
          - pattern: |
              window.location.href = $URL
          - pattern: |
              location.href = $URL
      - pattern-not: |
          window.location.href = "..."
      - pattern-not: |
          location.href = "..."
      - pattern-not: |
          location.replace("...")
      - pattern-not: window.location.replace("...")
  - id: javascript.browser.security.raw-html-concat.raw-html-concat
    message: User controlled data in a HTML string may result in XSS
    languages:
      - javascript
      - typescript
    severity: WARNING
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://owasp.org/www-community/attacks/xss/
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.raw-html-concat.raw-html-concat
      shortlink: https://sg.run/4xAx
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.raw-html-concat.raw-html-concat
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - patterns:
              - pattern: $STRING + $EXPR
              - pattern-not: $STRING + "..."
              - metavariable-pattern:
                  metavariable: $STRING
                  language: generic
                  patterns:
                    - pattern: <$TAG ...
          - patterns:
              - pattern: $EXPR + $STRING
              - pattern-not: '"..." + $STRING'
              - metavariable-pattern:
                  metavariable: $STRING
                  language: generic
                  patterns:
                    - pattern: '... </$TAG'
          - patterns:
              - pattern: '[..., $STRING, ...].join(...)'
              - metavariable-pattern:
                  metavariable: $STRING
                  language: generic
                  patterns:
                    - pattern: <$TAG ...
          - patterns:
              - pattern: '[..., $STRING, ...].join(...)'
              - metavariable-pattern:
                  metavariable: $STRING
                  language: generic
                  patterns:
                    - pattern: '... </$TAG'
          - patterns:
              - pattern: $VAR += $STRING
              - metavariable-pattern:
                  metavariable: $STRING
                  language: generic
                  patterns:
                    - pattern: <$TAG ...
          - patterns:
              - pattern: $VAR += $STRING
              - metavariable-pattern:
                  metavariable: $STRING
                  language: generic
                  patterns:
                    - pattern: '... </$TAG'
  - id: javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration
    message: The target origin of the window.postMessage() API is set to "*". This could
      allow for information disclosure due to the possibility of any origin allowed
      to receive the message.
    languages:
      - javascript
      - typescript
    severity: WARNING
    metadata:
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
      category: security
      technology:
        - browser
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration
      shortlink: https://sg.run/PJ4p
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration
      semgrep.ruleset: owasp-top-ten
    pattern: $OBJECT.postMessage(...,'*')
  - id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection
    message: If unverified user data can reach the `compileScript` method it can result
      in Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - chrome-remote-interface
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection
      shortlink: https://sg.run/J9kj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('chrome-remote-interface');
          ...
      - pattern-not-inside: |
          var $INPUT = "...";
          ...
      - pattern: |
          $RUNTIME.compileScript({expression: $INPUT},...)
      - pattern-not: '$RUNTIME.compileScript({expression: "..."},...)'
  - id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-evaluate-injection.chrome-remote-interface-evaluate-injection
    message: If unverified user data can reach the `evaluate` method it can result in
      Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - chrome-remote-interface
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-evaluate-injection.chrome-remote-interface-evaluate-injection
      shortlink: https://sg.run/5QBD
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-evaluate-injection.chrome-remote-interface-evaluate-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('chrome-remote-interface');
          ...
      - pattern-not-inside: |
          var $INPUT = "...";
          ...
      - pattern: |
          $RUNTIME.evaluate({expression: $INPUT},...)
      - pattern-not: '$RUNTIME.evaluate({expression: "..."},...)'
  - id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-navigate-injection.chrome-remote-interface-navigate-injection
    message: If unverified user data can reach the `navigate` method it can result in
      Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - chrome-remote-interface
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-navigate-injection.chrome-remote-interface-navigate-injection
      shortlink: https://sg.run/Gery
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-navigate-injection.chrome-remote-interface-navigate-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('chrome-remote-interface');
          ...
      - pattern-not-inside: |
          var $INPUT = "...";
          ...
      - pattern: |
          $PAGE.navigate({url: $INPUT},...)
      - pattern-not: '$PAGE.navigate({url: "..."},...)'
  - id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-printtopdf-injection.chrome-remote-interface-printtopdf-injection
    message: If unverified user data can reach the `printToPDF` method it can result
      in Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - chrome-remote-interface
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-printtopdf-injection.chrome-remote-interface-printtopdf-injection
      shortlink: https://sg.run/RoJg
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-printtopdf-injection.chrome-remote-interface-printtopdf-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('chrome-remote-interface');
          ...
      - pattern-not-inside: |
          var $INPUT = "...";
          ...
      - pattern-either:
          - pattern: |
              $RUNTIME.printToPDF({headerTemplate: $INPUT},...)
          - pattern: |
              $RUNTIME.printToPDF({footerTemplate: $INPUT},...)
      - pattern-not: |
          $RUNTIME.printToPDF({headerTemplate: "..."},...)
      - pattern-not: '$RUNTIME.printToPDF({footerTemplate: "..."},...)'
  - id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-setdocumentcontent-injection.chrome-remote-interface-setdocumentcontent-injection
    message: If unverified user data can reach the `setDocumentContent` method it can
      result in Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - chrome-remote-interface
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-setdocumentcontent-injection.chrome-remote-interface-setdocumentcontent-injection
      shortlink: https://sg.run/Av2L
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-setdocumentcontent-injection.chrome-remote-interface-setdocumentcontent-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('chrome-remote-interface');
          ...
      - pattern-not-inside: |
          var $INPUT = "...";
          ...
      - pattern: |
          $PAGE.setDocumentContent({html: $INPUT},...)
      - pattern-not: '$PAGE.setDocumentContent({html: "..."},...)'
  - id: javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run
    metadata:
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
      owasp: 'A1: Injection'
      category: security
      technology:
        - deno
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run
      shortlink: https://sg.run/Nrrn
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run
      semgrep.ruleset: owasp-top-ten
    message: Detected non-literal calls to Deno.run(). This could lead to a command
      injection vulnerability.
    pattern-either:
      - patterns:
          - pattern: |
              Deno.run({cmd: [$CMD,...]},...)
          - pattern-not-inside: |
              $CMD = "..."
              ...
          - pattern-not: |
              Deno.run({cmd: ["...",...]},...)
      - patterns:
          - pattern-either:
              - pattern: |
                  Deno.run({cmd: ["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...]},...)
              - patterns:
                  - pattern: |
                      Deno.run({cmd: [$CMD,"-c",$ARG,...]},...)
                  - pattern-inside: |
                      $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
                      ...
          - pattern-not: |
              Deno.run({cmd: [$CMD,"-c","...",...]},...)
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
    message: "Don\u2019t use the default session cookie name Using the default session
    cookie name can open your app to attacks. The security issue posed is similar
    to X-Powered-By: a potential attacker can use it to fingerprint the server and
    target attacks accordingly."
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
      shortlink: https://sg.run/1Z5x
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {name:...} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {name:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.name = ...;
          ...
          $SESSION($OPTS,...);
  - id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
    message: 'Default session middleware settings: `secure` not set. It ensures the
    browser only sends the cookie over HTTPS.'
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
      shortlink: https://sg.run/9oKz
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{secure:true}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{secure:true}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {secure:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {secure:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.secure = true;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.secure = true;
          ...
          $SESSION($OPTS,...);
  - id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
    message: 'Default session middleware settings: `httpOnly` not set. It ensures the
    cookie is sent only over HTTP(S), not client JavaScript, helping to protect against
    cross-site scripting attacks.'
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
      shortlink: https://sg.run/ydBO
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{httpOnly:true}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{httpOnly:true}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {httpOnly:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {httpOnly:true} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.httpOnly = true;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.httpOnly = true;
          ...
          $SESSION($OPTS,...);
  - id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
    message: 'Default session middleware settings: `domain` not set. It indicates the
    domain of the cookie; use it to compare against the domain of the server in which
    the URL is being requested. If they match, then check the path attribute next.'
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
      shortlink: https://sg.run/rd41
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{domain:...}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{domain:...}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {domain:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {domain:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.domain = ...;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.domain = ...;
          ...
          $SESSION($OPTS,...);
  - id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
    message: 'Default session middleware settings: `path` not set. It indicates the
    path of the cookie; use it to compare against the request path. If this and domain
    match, then send the cookie in the request.'
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
      shortlink: https://sg.run/b7pd
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{path:...}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{path:...}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {path:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {path:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.path = ...;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie.path = ...;
          ...
          $SESSION($OPTS,...);
  - id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
    message: 'Default session middleware settings: `expires` not set. Use it to set
    expiration date for persistent cookies.'
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
      shortlink: https://sg.run/N4eG
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: |
              $SESSION = require('cookie-session');
              ...
          - pattern-inside: |
              $SESSION = require('express-session');
              ...
      - pattern: $SESSION(...)
      - pattern-not-inside: $SESSION(<... {cookie:{expires:...}} ...>,...)
      - pattern-not-inside: |
          $OPTS = <... {cookie:{expires:...}} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE = <... {expires:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $OPTS.cookie = <... {expires:...} ...>;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |
          $OPTS = ...;
          ...
          $COOKIE.expires = ...;
          ...
          $SESSION($OPTS,...);
      - pattern-not-inside: |-
          $OPTS = ...;
          ...
          $OPTS.cookie.expires = ...;
          ...
          $SESSION($OPTS,...);
  - id: javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked
    message: No token revoking configured for `express-jwt`. A leaked token could still
      be used and unable to be revoked. Consider using function as the `isRevoked` option.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked
      shortlink: https://sg.run/kXNo
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $JWT = require('express-jwt');
          ...
      - pattern: $JWT(...)
      - pattern-not-inside: $JWT(<... {isRevoked:...} ...>,...)
      - pattern-not-inside: |-
          $OPTS = <... {isRevoked:...} ...>;
          ...
          $JWT($OPTS,...);
  - id: javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
    message: Possible writing outside of the destination, make sure that the target
      path is nested in the intended destination
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A5: Broken Access Control'
      cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path
      Traversal)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
      shortlink: https://sg.run/weRn
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    patterns:
      - pattern-inside: |
          $PATH = require('path');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $PATH.join(...,<... $REQ.$BODY ...>,...)
          - pattern: $PATH.join(...,<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $PATH.join(...,<... $VAR ...>,...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PATH.join(...,<... $VAR ...>,...);
          - pattern: $PATH.resolve(...,<... $REQ.$BODY ...>,...)
          - pattern: $PATH.resolve(...,<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $PATH.resolve(...,<... $VAR ...>,...);
          - pattern: |-
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PATH.resolve(...,<... $VAR ...>,...);
  - id: javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event
    message: Xml Parser is used inside Request Event. Make sure that unverified user
      data can not reach the XML Parser, as it can result in XML External or Internal
      Entity (XXE) Processing vulnerabilities
    metadata:
      owasp: 'A4: XML External Entities (XXE)'
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event
      shortlink: https://sg.run/x1AA
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('xml2json');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern: $REQ.on('...', function(...) { ... $EXPAT.toJson($INPUT,...); ... })
  - id: javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect
    patterns:
      - pattern-either:
          - pattern-inside: |
              $UNK = query.$B;
              ...
          - pattern-inside: |
              $UNK = $A.query.$B;
              ...
          - pattern-inside: |
              $UNK = req.$SOMETHING;
              ...
      - pattern: $RES.redirect(..., <... $UNK ...>, ...)
    message: It looks like '$UNK' is read from user input and it is used to as a redirect.
      Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.1 Insecue Redirect
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
        version: '4'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect
      shortlink: https://sg.run/OPv2
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.express.security.audit.res-render-injection.res-render-injection
    message: If an attacker controls the x in res.render(x) then they can cause code
      to load that was not intended to run on the server.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.res-render-injection.res-render-injection
      shortlink: https://sg.run/eLjd
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.res-render-injection.res-render-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $RES.render(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $RES.render(<... $REQ.$BODY ...>,...)
  - id: javascript.express.security.audit.xss.direct-response-write.direct-response-write
    message: Detected directly writing to a Response object. This bypasses any HTML
      escaping and may expose your app to a cross-site scripting (XSS) vulnerability.
      Instead, use 'resp.render()' to render safely escaped HTML.
    languages:
      - javascript
      - typescript
    severity: ERROR
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write
      shortlink: https://sg.run/vzGl
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: function ($REQ, $RES) {...}
          - pattern-inside: function $FUNC($REQ, $RES) {...}
          - pattern-inside: function ($REQ, $RES, $NEXT) {...}
          - pattern-inside: function $FUNC($REQ, $RES, $NEXT) {...}
          - pattern-inside: $X = function $FUNC($REQ, $RES) {...}
          - pattern-inside: $X = function $FUNC($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-not: $RES.write("...")
      - pattern-not: $RES.send("...")
      - pattern-either:
          - pattern: $RES.write(...)
          - pattern: $RES.send(...)
  - id: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape
    message: Detected an explicit unescape in an EJS template, using '<%- ... %>' If
      external data can reach these locations, your application is exposed to a cross-site
      scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need
      escaping, ensure no external data can reach this location.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape
      shortlink: https://sg.run/dKXQ
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.ejs'
        - '*.html'
    severity: WARNING
    pattern-regex: <%-((?!include).)*?%>
    fix-regex:
      regex: <%-(.*?)%>
      replacement: <%=\1%>
  - id: javascript.express.security.audit.xss.ejs.var-in-href.var-in-href
    message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: href=''/<%= link %>''.
    You may also consider setting the Content Security Policy (CSP) header.'
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
        - https://github.com/pugjs/pug/issues/2952
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-href.var-in-href
      shortlink: https://sg.run/Zv0p
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-href.var-in-href
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.ejs'
        - '*.html'
    severity: WARNING
    pattern-regex: <a.*href\s*=[^>]*?[^\/&=]<%.*?%>.*?>
  - id: javascript.express.security.audit.xss.ejs.var-in-script-src.var-in-script-src
    message: Detected a template variable used as the 'src' in a script tag. Although
      template variables are HTML escaped, HTML escaping does not always prevent malicious
      URLs from being injected and could results in a cross-site scripting (XSS) vulnerability.
      Prefer not to dynamically generate the 'src' attribute and use static URLs instead.
      If you must do this, carefully check URLs against an allowlist and be sure to
      URL-encode the result.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
        - https://github.com/ESAPI/owasp-esapi-js
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-script-src.var-in-script-src
      shortlink: https://sg.run/ndxZ
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-script-src.var-in-script-src
      semgrep.ruleset: owasp-top-ten
    languages:
      - generic
    paths:
      include:
        - '*.ejs'
        - '*.html'
    severity: WARNING
    patterns:
      - pattern-inside: <script ...>
      - pattern-either:
          - pattern-inside: src = '...'
          - pattern-inside: src = "..."
      - pattern: <% ... >
  - id: javascript.express.security.audit.xss.ejs.var-in-script-tag.var-in-script-tag
    message: Detected a template variable used in a script tag. Although template variables
      are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
      attacks when used directly in JavaScript. If you need this data on the rendered
      page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
      use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
        - https://github.com/ESAPI/owasp-esapi-js
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-script-tag.var-in-script-tag
      shortlink: https://sg.run/Ek9L
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-script-tag.var-in-script-tag
      semgrep.ruleset: owasp-top-ten
    languages:
      - generic
    paths:
      include:
        - '*.ejs'
        - '*.html'
    severity: WARNING
    patterns:
      - pattern-inside: <script ...> ... </script>
      - pattern-not-inside: <script ... $ATTR = "..." ...>
      - pattern-not-inside: <script ... $ATTR = '...' ...>
      - pattern: <% ... >
  - id: javascript.express.security.audit.xss.mustache.escape-function-overwrite.escape-function-overwrite
    message: 'The Mustache escape function is being overwritten. This could bypass HTML
    escaping safety measures built into the rendering engine, exposing your application
    to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use
    the triple brace operator in your template: ''{{{ ... }}}''.'
    languages:
      - javascript
      - typescript
    severity: WARNING
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://github.com/janl/mustache.js/#variables
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.escape-function-overwrite.escape-function-overwrite
      shortlink: https://sg.run/7oWe
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.escape-function-overwrite.escape-function-overwrite
      semgrep.ruleset: owasp-top-ten
    pattern-either:
      - pattern: Mustache.escape = ...
      - patterns:
          - pattern-inside: |
              $MUSTACHE = require("mustache");
              ...
          - pattern: $MUSTACHE.escape = ...
  - id: javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape
    message: Detected an explicit unescape in a Mustache template, using triple braces
      '{{{...}}}' or ampersand '&'. If external data can reach these locations, your
      application is exposed to a cross-site scripting (XSS) vulnerability. If you must
      do this, ensure no external data can reach this location.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://github.com/janl/mustache.js/#variables
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape
      shortlink: https://sg.run/Lwx9
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.mustache'
        - '*.hbs'
        - '*.html'
    severity: WARNING
    pattern-either:
      - pattern-regex: '{{{((?!include).)*?}}}'
      - pattern-regex: '{{[^}&]*&[^}&]*}}'
  - id: javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
    message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: href=''/{{link}}''.
    You may also consider setting the Content Security Policy (CSP) header.'
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
        - https://github.com/pugjs/pug/issues/2952
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
      shortlink: https://sg.run/8yOq
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.mustache'
        - '*.hbs'
        - '*.html'
    severity: WARNING
    pattern-regex: <a.*href\s*=(\s|['"])*?{{.*?}}.*
  - id: javascript.express.security.audit.xss.mustache.var-in-script-tag.var-in-script-tag
    message: Detected a template variable used in a script tag. Although template variables
      are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
      attacks when used directly in JavaScript. If you need this data on the rendered
      page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
      use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
        - https://github.com/ESAPI/owasp-esapi-js
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-script-tag.var-in-script-tag
      shortlink: https://sg.run/gLDx
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-script-tag.var-in-script-tag
      semgrep.ruleset: owasp-top-ten
    languages:
      - generic
    paths:
      include:
        - '*.mustache'
        - '*.hbs'
        - '*.html'
    severity: WARNING
    patterns:
      - pattern-inside: <script ...> ... </script>
      - pattern: '{{ ... }}'
  - id: javascript.express.security.audit.xss.pug.and-attributes.template-and-attributes
    message: Detected a unescaped variables using '&attributes'. If external data can
      reach these locations, your application is exposed to a cross-site scripting (XSS)
      vulnerability. If you must do this, ensure no external data can reach this location.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://pugjs.org/language/attributes.html#attributes
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.and-attributes.template-and-attributes
      shortlink: https://sg.run/Q5jk
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.and-attributes.template-and-attributes
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.pug'
    severity: WARNING
    pattern-regex: .*&attributes.*
  - id: javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
    message: Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'.
      If external data can reach these locations, your application is exposed to a cross-site
      scripting (XSS) vulnerability. If you must do this, ensure no external data can
      reach this location.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://pugjs.org/language/code.html#unescaped-buffered-code
        - https://pugjs.org/language/attributes.html#unescaped-attributes
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
      shortlink: https://sg.run/3xbe
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.pug'
    severity: WARNING
    pattern-either:
      - pattern-regex: \w.*(!=)[^=].*
      - pattern-regex: '!{.*?}'
  - id: javascript.express.security.audit.xss.pug.var-in-href.var-in-href
    message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: a(href=''/''+url). You
    may also consider setting the Content Security Policy (CSP) header.'
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://github.com/pugjs/pug/issues/2952
        - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.var-in-href.var-in-href
      shortlink: https://sg.run/4xNx
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.var-in-href.var-in-href
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.pug'
    severity: WARNING
    pattern-regex: a\(.*href=[^'"].*\)
  - id: javascript.express.security.audit.xss.pug.var-in-script-tag.var-in-script-tag
    message: Detected a template variable used in a script tag. Although template variables
      are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
      attacks when used directly in JavaScript. If you need this data on the rendered
      page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
      use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
        - https://github.com/ESAPI/owasp-esapi-js
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.var-in-script-tag.var-in-script-tag
      shortlink: https://sg.run/PJXp
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.var-in-script-tag.var-in-script-tag
      semgrep.ruleset: owasp-top-ten
    languages:
      - regex
    paths:
      include:
        - '*.pug'
    severity: WARNING
    pattern-either:
      - pattern-regex: script\s*=[A-Za-z0-9]+
      - pattern-regex: script\s*=.*["']\s*\+.*
      - pattern-regex: script\s*=[^'"]+\+.*
      - pattern-regex: script\(.*?\)\s*=\s*[A-Za-z0-9]+
      - pattern-regex: script\(.*?\)\s*=\s*.*["']\s*\+.*
      - pattern-regex: script\(.*?\)\s*=\s*[^'"]+\+.*
  - id: javascript.express.security.express-expat-xxe.express-expat-xxe
    mode: taint
    message: Make sure that unverified user data can not reach the XML Parser, as it
      can result in XML External or Internal Entity (XXE) Processing vulnerabilities
    metadata:
      owasp: 'A4: XML External Entities (XXE)'
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.2 Insecue XML Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: '4'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-expat-xxe.express-expat-xxe
      shortlink: https://sg.run/BkXx
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-expat-xxe.express-expat-xxe
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
          - pattern-either:
              - pattern: $REQ.$QUERY
              - pattern: $REQ.$BODY.$PARAM
    pattern-sinks:
      - patterns:
          - pattern-inside: |
              require('node-expat');
              ...
          - pattern-either:
              - pattern-inside: |
                  $PARSER = new $EXPAT.Parser(...);
                  ...
              - pattern-inside: |
                  $PARSER = new Parser(...);
                  ...
          - pattern-either:
              - pattern: $PARSER.parse(...)
              - pattern: $PARSER.write(...)
  - id: javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret
    message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret
      shortlink: https://sg.run/Do1d
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $JWT = require('express-jwt');
          ...
      - pattern-either:
          - pattern: |
              $JWT(<... {secret: "..."} ...>,...);
          - pattern: |
              $OPTS = <... {secret: "..."} ...>;
              ...
              $JWT($OPTS,...);
  - id: javascript.express.security.express-phantom-injection.express-phantom-injection
    message: If unverified user data can reach the `phantom` methods it can result in
      Server-Side Request Forgery vulnerabilities
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-phantom-injection.express-phantom-injection
      shortlink: https://sg.run/W8BL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-phantom-injection.express-phantom-injection
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('phantom');
          ...
      - pattern-inside: |
          require('express');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $PAGE.open(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.open(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.openUrl(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.openUrl(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.evaluateJavaScript(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.evaluateJavaScript(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.property("content",<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.property("content",<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.open(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.open(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.setContent(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.setContent(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.openUrl(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.openUrl(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.evaluateJavaScript(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.evaluateJavaScript(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.property("content",<... $INPUT ...>,...);
          - pattern: |-
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.property("content",<... $INPUT ...>,...);
  - id: javascript.express.security.express-puppeteer-injection.express-puppeteer-injection
    message: If unverified user data can reach the `puppeteer` methods it can result
      in Server-Side Request Forgery vulnerabilities
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-puppeteer-injection.express-puppeteer-injection
      shortlink: https://sg.run/0QJB
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-puppeteer-injection.express-puppeteer-injection
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('puppeteer');
          ...
      - pattern-inside: |
          require('express');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.evaluate($CODE,<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.evaluate($CODE,<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$BODY ...>,...)
          - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.goto(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.goto(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.setContent(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.setContent(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.evaluate(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.evaluate(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.evaluateHandle(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.evaluateHandle(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.evaluate($CODE,<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.evaluate($CODE,<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);
  - id: javascript.express.security.express-sandbox-injection.express-sandbox-code-injection
    mode: taint
    message: Make sure that unverified user data can not reach `sandbox`.
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-sandbox-injection.express-sandbox-code-injection
      shortlink: https://sg.run/KlwL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-sandbox-injection.express-sandbox-code-injection
      semgrep.ruleset: owasp-top-ten
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern-inside: function ... ($REQ, $RES) {...}
              - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
              - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
              - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
          - pattern-either:
              - pattern: $REQ.$QUERY
              - pattern: $REQ.$BODY.$PARAM
    pattern-sinks:
      - patterns:
          - pattern-inside: |
              $SANDBOX = require('sandbox');
              ...
          - pattern-either:
              - patterns:
                  - pattern-inside: |
                      $S = new $SANDBOX(...);
                      ...
                  - pattern: |
                      $S.run(...)
              - pattern: |
                  new $SANDBOX($OPTS).run(...)
              - pattern: |
                  new $SANDBOX().run(...)
  - id: javascript.express.security.express-vm2-injection.express-vm2-code-injection
    message: |
      Make sure that unverified user data can not reach `vm2`.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-vm2-injection.express-vm2-code-injection
      shortlink: https://sg.run/oxO6
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-vm2-injection.express-vm2-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          require('vm2');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: |
              $VM = new VM(...);
              ...
              $VM.run(<... $REQ.$QUERY.$FOO ...>,...);
          - pattern: |
              $VM = new VM(...);
              ...
              $CODE = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.run(<... $CODE ...>,...);
          - pattern: |
              $CODE = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM = new VM(...);
              ...
              $VM.run(<... $CODE ...>,...);
          - pattern: |
              new VM(...).run(<... $REQ.$QUERY.$FOO ...>,...);
          - pattern: |
              $CODE = <... $REQ.$QUERY.$FOO ...>;
              ...
              new VM(...).run($CODE,...);
          - pattern: |
              $VM = new NodeVM(...);
              ...
              $VM.run(<... $REQ.$QUERY.$FOO ...>,...);
          - pattern: |
              $VM = new NodeVM(...);
              ...
              $CODE = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.run($CODE,...);
          - pattern: |
              $CODE = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM = new NodeVM(...);
              ...
              $VM.run($CODE,...);
          - pattern: |
              new NodeVM(...).run(<... $REQ.$QUERY.$FOO ...>,...);
          - pattern: |
              $CODE = <... $REQ.$QUERY.$FOO ...>;
              ...
              new NodeVM(...).run(<... $CODE ...>,...);
          - pattern: |
              $CODE = <... $REQ.$QUERY.$FOO ...>;
              ...
              new VMScript(<... $CODE ...>,...);
          - pattern: |
              $VM = new VM(...);
              ...
              $VM.run(<... $REQ.$BODY ...>,...);
          - pattern: |
              $VM = new VM(...);
              ...
              $CODE = <... $REQ.$BODY ...>;
              ...
              $VM.run(<... $CODE ...>,...);
          - pattern: |
              $CODE = <... $REQ.$BODY ...>;
              ...
              $VM = new VM(...);
              ...
              $VM.run(<... $CODE ...>,...);
          - pattern: |
              new VM(...).run(<... $REQ.$BODY ...>,...);
          - pattern: |
              $CODE = <... $REQ.$BODY ...>;
              ...
              new VM(...).run($CODE,...);
          - pattern: |
              $VM = new NodeVM(...);
              ...
              $VM.run(<... $REQ.$BODY ...>,...);
          - pattern: |
              $VM = new NodeVM(...);
              ...
              $CODE = <... $REQ.$BODY ...>;
              ...
              $VM.run($CODE,...);
          - pattern: |
              $CODE = <... $REQ.$BODY ...>;
              ...
              $VM = new NodeVM(...);
              ...
              $VM.run($CODE,...);
          - pattern: |
              new NodeVM(...).run(<... $REQ.$BODY ...>,...);
          - pattern: |
              $CODE = <... $REQ.$BODY ...>;
              ...
              new NodeVM(...).run(<... $CODE ...>,...);
          - pattern: |
              $CODE = <... $REQ.$BODY ...>;
              ...
              new VMScript(<... $CODE ...>,...);
  - id: javascript.express.security.express-vm2-injection.express-vm2-context-injection
    message: |
      Make sure that unverified user data can not reach `vm2`.
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-vm2-injection.express-vm2-context-injection
      shortlink: https://sg.run/zvDl
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-vm2-injection.express-vm2-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          require('vm2');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: |
              new VM({sandbox: <... $REQ.$QUERY.$FOO ...>},...);
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              new NodeVM({sandbox: <... $REQ.$QUERY.$FOO ...>},...);
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $OPTS = {sandbox: <... $REQ.$QUERY.$FOO ...>};
              ...
              new NodeVM($OPTS,...);
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new NodeVM($OPTS,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new NodeVM($OPTS,...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new NodeVM($OPTS,...);
          - pattern: |
              new VM({sandbox: <... $REQ.$BODY ...>},...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              new VM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $OPTS = {sandbox: <... $REQ.$BODY ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new VM($OPTS,...);
          - pattern: |
              new NodeVM({sandbox: <... $REQ.$BODY ...>},...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              new NodeVM({sandbox: <... $CONTEXT ...>},...);
          - pattern: |
              $OPTS = {sandbox: <... $REQ.$BODY ...>};
              ...
              new NodeVM($OPTS,...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new NodeVM($OPTS,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new NodeVM($OPTS,...);
          - pattern: |-
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $OPTS = {sandbox: <... $CONTEXT ...>};
              ...
              new NodeVM($OPTS,...);
  - id: javascript.express.security.express-vm-injection.express-vm-runincontext-context-injection
    message: |
      Make sure that unverified user data can not reach vm.runInContext.
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-runincontext-context-injection
      shortlink: https://sg.run/qxve
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-runincontext-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $VM.runInContext($CODE,<... $CONTEXT ...>,...);
  - id: javascript.express.security.express-vm-injection.express-vm-runinnewcontext-context-injection
    message: |
      Make sure that unverified user data can not reach vm.runInNewContext.
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-runinnewcontext-context-injection
      shortlink: https://sg.run/l2kG
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-runinnewcontext-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: |
              $VM.runInNewContext($CODE,<... $REQ.$QUERY.$FOO ...>,...);
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $VM.runInNewContext($CODE,<... $REQ.$BODY ...>,...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
  - id: javascript.express.security.express-vm-injection.express-vm-compilefunction-context-injection
    message: |
      Make sure that unverified user data can not reach vm.compileFunction.
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-compilefunction-context-injection
      shortlink: https://sg.run/YvWo
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-compilefunction-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: |
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$QUERY.$FOO ...>},...);
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$QUERY.$FOO} ...>;
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $OPTS = {parsingContext: <... $REQ.$QUERY.$FOO ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          - pattern: |
              $CONTEXT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $OPTS = {parsingContext: <... $CONTEXT ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$QUERY.$FOO ...>};
              ...
              $OPTS = {parsingContext: <... $CONTEXT ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          - pattern: |
              $VAR = <... $REQ.$QUERY.$FOO ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $OPTS = {parsingContext: <... $CONTEXT ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          - pattern: |
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $REQ.$BODY ...>},...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = <... {$NAME:$REQ.$BODY} ...>;
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
          - pattern: |
              $OPTS = {parsingContext: <... $REQ.$BODY ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          - pattern: |
              $CONTEXT = <... $REQ.$BODY ...>;
              ...
              $OPTS = {parsingContext: <... $CONTEXT ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          - pattern: |
              $CONTEXT = {$NAME: <... $REQ.$BODY ...>};
              ...
              $OPTS = {parsingContext: <... $CONTEXT ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
          - pattern: |
              $VAR = <... $REQ.$BODY ...>;
              ...
              $CONTEXT = {$NAME: <... $VAR ...>};
              ...
              $OPTS = {parsingContext: <... $CONTEXT ...>};
              ...
              $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
  - id: javascript.express.security.express-vm-injection.express-vm-code-injection
    message: |
      Make sure that unverified user data can not reach vm instance.
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-code-injection
      shortlink: https://sg.run/6nDL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $VM.runInContext(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $VM.runInContext(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.runInContext($INPUT,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $VM.runInContext($INPUT,...);
          - pattern: $VM.runInNewContext(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $VM.runInNewContext(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.runInNewContext($INPUT,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $VM.runInNewContext($INPUT,...);
          - pattern: $VM.runInThisContext(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $VM.runInThisContext(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.runInThisContext($INPUT,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $VM.runInThisContext($INPUT,...);
          - pattern: $VM.compileFunction(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $VM.compileFunction(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $VM.compileFunction($INPUT,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $VM.compileFunction($INPUT,...);
          - pattern: new $VM.Script(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: new $VM.Script(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              new $VM.Script($INPUT,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              new $VM.Script($INPUT,...);
  - id: javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
    message: If unverified user data can reach the `phantom` methods it can result in
      Server-Side Request Forgery vulnerabilities
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
      shortlink: https://sg.run/pxe0
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $WK = require('wkhtmltoimage');
          ...
      - pattern-inside: |
          require('express');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $WK.generate(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $WK.generate(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $WK.generate(<... $INPUT ...>,...);
          - pattern: |
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $WK.generate(<... $INPUT ...>,...);
  - id: javascript.express.security.express-wkhtml-injection.express-wkhtmltopdf-injection
    message: If unverified user data can reach the `phantom` methods it can result in
      Server-Side Request Forgery vulnerabilities
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-wkhtml-injection.express-wkhtmltopdf-injection
      shortlink: https://sg.run/2xGq
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-wkhtml-injection.express-wkhtmltopdf-injection
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $WK = require('wkhtmltopdf');
          ...
      - pattern-inside: |
          require('express');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $WK(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $WK(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $WK(<... $INPUT ...>,...);
          - pattern: |-
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $WK(<... $INPUT ...>,...);
  - id: javascript.express.security.express-xml2json-xxe.express-xml2json-xxe
    message: Make sure that unverified user data can not reach the XML Parser, as it
      can result in XML External or Internal Entity (XXE) Processing vulnerabilities
    metadata:
      owasp: 'A4: XML External Entities (XXE)'
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.2 Insecue XML Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: '4'
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.express-xml2json-xxe.express-xml2json-xxe
      shortlink: https://sg.run/XBD4
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.express-xml2json-xxe.express-xml2json-xxe
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('xml2json');
          ...
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: $EXPAT.toJson(<... $REQ.$QUERY.$FOO ...>,...)
          - pattern: $EXPAT.toJson(<... $REQ.$BODY ...>,...)
          - pattern: |
              $INPUT = <... $REQ.$QUERY.$FOO ...>;
              ...
              $EXPAT.toJson(<... $INPUT ...>,...);
          - pattern: |-
              $INPUT = <... $REQ.$BODY ...>;
              ...
              $EXPAT.toJson(<... $INPUT ...>,...);
  - id: javascript.express.security.require-request.require-request
    message: If an attacker controls the x in require(x) then they can cause code to
      load that was not intended to run on the server.
    severity: ERROR
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
      source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
      category: security
      technology:
        - express
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.express.security.require-request.require-request
      shortlink: https://sg.run/jRbl
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.express.security.require-request.require-request
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern-inside: function ... ($REQ, $RES) {...}
          - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
          - pattern-inside: $APP.get(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.post(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.put(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.head(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.delete(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.options(..., function $FUNC($REQ, $RES) {...})
      - pattern-either:
          - pattern: require(<... $REQ.$QUERY.$FOO ...>)
          - pattern: require(<... $REQ.$BODY ...>)
  - id: javascript.fbjs.security.audit.insecure-createnodesfrommarkup.insecure-createnodesfrommarkup
    patterns:
      - pattern-either:
          - pattern: createNodesFromMarkup(...)
          - pattern: $X.createNodesFromMarkup(...)
      - pattern-not: createNodesFromMarkup("...",...)
      - pattern-not: $X.createNodesFromMarkup("...",...)
    message: User controlled data in a `createNodesFromMarkup` is an anti-pattern that
      can lead to XSS vulnerabilities
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - fbjs
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.fbjs.security.audit.insecure-createnodesfrommarkup.insecure-createnodesfrommarkup
      shortlink: https://sg.run/J9Yj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.fbjs.security.audit.insecure-createnodesfrommarkup.insecure-createnodesfrommarkup
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection
    message: Found an insecure gRPC connection. This creates a connection without encryption
      to a gRPC client/server. A malicious attacker could tamper with the gRPC message,
      which could compromise the machine.
    metadata:
      owasp: 'A8: Insecure Deserialization'
      cwe: 'CWE-502: Deserialization of Untrusted Data'
      category: security
      technology:
        - grpc
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection
      shortlink: https://sg.run/5QkD
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    pattern-either:
      - pattern: |
          require('grpc');
          ...
          $GRPC($ADDR,...,$CREDENTIALS.createInsecure(),...);
      - pattern: |-
          require('grpc');
          ...
          $CREDS = <... $CREDENTIALS.createInsecure() ...>;
          ...
          $GRPC($ADDR,...,$CREDS,...);
  - id: javascript.jose.security.audit.jose-exposed-data.jose-exposed-data
    message: The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive
      information is not exposed through JWT token payload.
    severity: WARNING
    metadata:
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jose
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jose.security.audit.jose-exposed-data.jose-exposed-data
      shortlink: https://sg.run/BkAx
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jose.security.audit.jose-exposed-data.jose-exposed-data
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('jose');
          ...
      - pattern-either:
          - patterns:
              - pattern-inside: function (...,$INPUT,...) {...}
              - pattern-either:
                  - pattern: $JOSE.JWT.sign($INPUT,...)
                  - pattern: $JWT.sign($INPUT,...)
          - patterns:
              - pattern-inside: function $F(...,$INPUT,...) {...}
              - pattern-either:
                  - pattern: $JOSE.JWT.sign($INPUT,...)
                  - pattern: $JWT.sign($INPUT,...)
  - id: javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      references:
        - https://cwe.mitre.org/data/definitions/522.html
      category: security
      technology:
        - jose
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials
      shortlink: https://sg.run/GeKy
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials
      semgrep.ruleset: owasp-top-ten
    message: Password is exposed through JWT token payload. This is not encrypted and
      the password could be compromised. Do not store passwords in JWT tokens.
    severity: ERROR
    pattern-either:
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $T = JWT.sign({password:...},...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $T = JWT.sign({password:...},...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = {password:...};
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = {password:...};
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = {password:...};
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = {password:...};
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P.password = ...;
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P.password = ...;
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = Object.assign(...,{password:...},...);
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = Object.assign(...,{password:...},...);
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = Object.assign(...,{password:...},...);
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = Object.assign(...,{password:...},...);
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $T = JWT.sign(Object.assign(...,{password:...},...),...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $T = JWT.sign(Object.assign(...,{password:...},...),...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $T = JWT.sign({$U:{password:...}},...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $T = JWT.sign({$U:{password:...}},...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = {$U:{password:...}};
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = {$U:{password:...}};
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = {$U:{password:...}};
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = {$U:{password:...}};
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P.$U.password = ...;
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P.$U.password = ...;
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = Object.assign(...,{$U:{password:...}},...);
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $P = Object.assign(...,{$U:{password:...}},...);
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = Object.assign(...,{$U:{password:...}},...);
          ...
          var $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $P = Object.assign(...,{$U:{password:...}},...);
          ...
          $T = JWT.sign($P,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          $T = JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
  - id: javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret
    message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jose
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret
      shortlink: https://sg.run/Ro1g
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: ERROR
    pattern-either:
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          JWT.verify($P, "...", ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $T = JWT.sign($P, "...", ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $T = JWT.verify($P, "...", ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          JWT.verify($P, JWK.asKey("..."), ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $KEY = JWK.asKey("...");
          ...
          JWT.verify($P, $KEY, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $T = JWT.sign($P, JWK.asKey("..."), ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $T = JWT.verify($P, JWK.asKey("..."), ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $KEY = JWK.asKey("...");
          ...
          var $T = JWT.sign($P, $KEY, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $KEY = JWK.asKey("...");
          ...
          var $T = JWT.verify($P, $KEY, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          JWT.verify($P, $SECRET, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          var $T = JWT.sign($P, $SECRET, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          var $T = JWT.verify($P, $SECRET, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          JWT.verify($P, JWK.asKey($SECRET), ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          var $KEY = JWK.asKey($SECRET);
          ...
          JWT.verify($P, $KEY, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          var $T = JWT.sign($P, JWK.asKey($SECRET), ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          var $KEY = JWK.asKey($SECRET);
          ...
          var $T = JWT.sign($P, $KEY, ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          var $T = JWT.verify($P, JWK.asKey($SECRET), ...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $SECRET = "...";
          ...
          var $KEY = JWK.asKey($SECRET);
          ...
          var $T = JWT.verify($P, $KEY, ...);
  - id: javascript.jose.security.jwt-none-alg.jwt-none-alg
    message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
      assumes the integrity of the token has already been verified. This would allow
      a malicious actor to forge a JWT token that will automatically be verified. Do
      not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
    metadata:
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jose
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg
      shortlink: https://sg.run/AvRL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: ERROR
    pattern-either:
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          var $T = JWT.verify($P, JWK.None,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          $T = JWT.verify($P, JWK.None,...);
      - pattern: |
          var $JOSE = require("jose");
          ...
          var { JWK, JWT } = $JOSE;
          ...
          JWT.verify($P, JWK.None,...);
  - id: javascript.jquery.security.audit.jquery-insecure-method.jquery-insecure-method
    message: User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that
      can lead to XSS vulnerabilities
    languages:
      - javascript
      - typescript
    severity: WARNING
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://owasp.org/www-community/attacks/xss/
        - https://bugs.jquery.com/ticket/9521
      category: security
      technology:
        - jquery
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jquery.security.audit.jquery-insecure-method.jquery-insecure-method
      shortlink: https://sg.run/DoDd
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jquery.security.audit.jquery-insecure-method.jquery-insecure-method
      semgrep.ruleset: owasp-top-ten
    pattern-either:
      - patterns:
          - pattern-either:
              - pattern: $.$METHOD($VAR,...)
              - pattern: $(...).$METHOD($VAR,...)
              - pattern: jQuery.$METHOD($VAR,...)
              - pattern: jQuery(...).$METHOD($VAR,...)
          - pattern-not: $.$METHOD("...",...)
          - pattern-not: $(...).$METHOD("...",...)
          - pattern-not: jQuery.$METHOD("...",...)
          - pattern-not: jQuery(...).$METHOD("...",...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(html|append|prepend|wrap|wrapInner|wrapAll|before|after|globalEval|getScript)$
      - patterns:
          - pattern-either:
              - pattern: $(...).$METHOD($VAR,...)
              - pattern: jQuery(...).$METHOD($VAR,...)
          - pattern-not: $("...",...).$METHOD(...)
          - pattern-not: jQuery("...",...).$METHOD(...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(appendTo|insertAfter|insertBefore|prependTo)$
  - id: javascript.jquery.security.audit.jquery-insecure-selector.jquery-insecure-selector
    message: User controlled data in a `$(...)` is an anti-pattern that can lead to
      XSS vulnerabilities
    languages:
      - javascript
      - typescript
    severity: WARNING
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://owasp.org/www-community/attacks/xss/
        - https://bugs.jquery.com/ticket/9521
      category: security
      technology:
        - jquery
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jquery.security.audit.jquery-insecure-selector.jquery-insecure-selector
      shortlink: https://sg.run/W8NL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jquery.security.audit.jquery-insecure-selector.jquery-insecure-selector
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-either:
          - pattern: |
              $(<... window ...>)
          - pattern: |
              $(<... location ...>)
          - pattern: |
              $X = <... window ...>;
              ...
              $(<... $X ...>);
          - pattern: |
              $X = <... location ...>;
              ...
              $(<... $X ...>);
          - patterns:
              - pattern-either:
                  - pattern-inside: |
                      function $FUNC(..., $Y, ...) {
                        ...
                      }
                  - pattern-inside: |
                      function (..., $Y, ...) {
                        ...
                      }
                  - pattern-inside: |
                      function $FUNC(...,$Z,...) {
                        ...
                        $Y = <... $Z ...>;
                        ...
                      }
                  - pattern-inside: |
                      function (...,$Z,...) {
                        ...
                        $Y = <... $Z ...>;
                        ...
                      }
              - pattern-either:
                  - pattern: |
                      $(<... $Y ...>)
                  - pattern: |
                      $("..." + (<... $Y ...>))
                  - pattern: |
                      $((<... $Y ...>) + "...")
              - pattern-not-inside: |
                  $JQUERY.each(function($INDEX, $Y) {
                    ...
                  })
      - pattern-not: |
          $(window)
      - pattern-not: |
          $(document)
      - pattern-not: |
          $(this)
  - id: javascript.jquery.security.audit.prohibit-jquery-html.prohibit-jquery-html
    patterns:
      - pattern: |
          $X.html(...)
      - pattern-not: |
          $X.html("...",...)
    message: JQuery's html function can lead to XSS. If the string is plain text, use
      the text function instead. Otherwise, use a function that escapes html such as
      edx's HtmlUtils.setHtml.
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      references:
        - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss.html#javascript-concat-html
        - https://stackoverflow.com/questions/8318581/html-vs-innerhtml-jquery-javascript-xss-attacks
      category: security
      technology:
        - jquery
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jquery.security.audit.prohibit-jquery-html.prohibit-jquery-html
      shortlink: https://sg.run/0Q9B
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jquery.security.audit.prohibit-jquery-html.prohibit-jquery-html
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify
    message: Detected the decoding of a JWT token without a verify step. JWT tokens
      must be verified before use, otherwise the token's integrity is unknown. This
      means a malicious actor could forge a JWT token with any claims. Call '.verify()'
      before using the token.
    metadata:
      cwe: 'CWE-345: Insufficient Verification of Data Authenticity'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify
      shortlink: https://sg.run/J9YP
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
    patterns:
      - pattern-inside: |
          $JWT = require('jsonwebtoken');
          ...
      - pattern-not-inside: |
          ...
          $JWT.verify($TOKEN, ...)
          ...
      - pattern-not-inside: |
          ...
          if (<... $JWT.verify($TOKEN, ...) ...>) { ... }
          ...
      - pattern: $JWT.decode($TOKEN, ...)
  - id: javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data
    message: The object is passed strictly to jsonwebtoken.sign(...) Make sure that
      sensitive information is not exposed through JWT token payload.
    severity: WARNING
    metadata:
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data
      shortlink: https://sg.run/5Qkj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $JWT = require('jsonwebtoken');
          ...
      - pattern-either:
          - pattern-inside: function (...,$INPUT,...) {...}
          - pattern-inside: function $F(...,$INPUT,...) {...}
      - pattern: $JWT.sign($INPUT,...)
  - id: javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials
    languages:
      - javascript
      - typescript
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      references:
        - https://cwe.mitre.org/data/definitions/522.html
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials
      shortlink: https://sg.run/Kl6L
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials
      semgrep.ruleset: owasp-top-ten
    message: Password is exposed through JWT token payload. This is not encrypted and
      the password could be compromised. Do not store passwords in JWT tokens.
    severity: ERROR
    patterns:
      - pattern-inside: |
          $JWT = require("jsonwebtoken");
          ...
      - pattern-either:
          - pattern: |
              $JWT.sign({password:...},...);
          - pattern: |
              $P = {password:...};
              ...
              $JWT.sign($P,...);
          - pattern: |
              $P.password = ...;
              ...
              $JWT.sign($P,...);
          - pattern: |
              $P = Object.assign(...,{password:...},...);
              ...
              $JWT.sign($P,...);
          - pattern: |
              $JWT.sign(Object.assign(...,{password:...},...),...);
          - pattern: |
              $JWT.sign({$U:{password:...}},...);
          - pattern: |
              $P = {$U:{password:...}};
              ...
              $JWT.sign($P,...);
          - pattern: |
              $P.$U.password = ...;
              ...
              $JWT.sign($P,...);
          - pattern: |
              $P = Object.assign(...,{$U:{password:...}},...);
              ...
              $JWT.sign($P,...);
          - pattern: |
              $JWT.sign(Object.assign(...,{$U:{password:...}},...),...);
  - id: javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
    message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
      shortlink: https://sg.run/4xN9
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: ERROR
    patterns:
      - pattern-inside: |
          $JWT = require("jsonwebtoken");
          ...
      - pattern-either:
          - pattern: |
              $JWT.sign($P, "...", ...);
          - pattern: |
              $JWT.verify($P, "...", ...);
          - patterns:
              - pattern-inside: |
                  $SECRET = "...";
                  ...
              - pattern-either:
                  - pattern: $JWT.sign($P, $SECRET, ...)
                  - pattern: $JWT.verify($P, $SECRET, ...)
  - id: javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg
    message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
      assumes the integrity of the token has already been verified. This would allow
      a malicious actor to forge a JWT token that will automatically be verified. Do
      not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
    metadata:
      cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.3 Insecue Stateless Session Tokens
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg
      shortlink: https://sg.run/PJXv
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: ERROR
    patterns:
      - pattern-inside: |
          $JWT = require("jsonwebtoken");
          ...
      - pattern: $JWT.verify($P, $X, {algorithms:[...,'none',...]},...)
  - id: javascript.lang.security.audit.dangerous-spawn-shell.dangerous-spawn-shell
    metadata:
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.dangerous-spawn-shell.dangerous-spawn-shell
      shortlink: https://sg.run/DJ8v
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.dangerous-spawn-shell.dangerous-spawn-shell
      semgrep.ruleset: owasp-top-ten
    message: Detected non-literal calls to $EXEC(). This could lead to a command injection
      vulnerability.
    patterns:
      - pattern-either:
          - pattern: spawn(...)
          - pattern: spawnSync(...)
          - pattern: $CP.spawn(...)
          - pattern: $CP.spawnSync(...)
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern: |
                      $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["-c", $ARG, ...],...)
                  - patterns:
                      - pattern: $EXEC($CMD,["-c", $ARG, ...],...)
                      - pattern-inside: |
                          $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
                          ...
              - pattern-not: |
                  $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["-c", "...", ...],...)
          - patterns:
              - pattern-either:
                  - pattern: |
                      $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",[$ARG, ...],...)
                  - patterns:
                      - pattern: $EXEC($CMD,[$ARG, ...],...)
                      - pattern-inside: |
                          $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
                          ...
              - pattern-not: |
                  $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["...", ...],...)
      - pattern-not-inside: |
          $ARG = "..."
          ...
      - pattern-either:
          - pattern-inside: |
              require('child_process')
              ...
          - pattern-inside: |
              import 'child_process'
              ...
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query
    patterns:
      - pattern: $DB.sequelize.query(...)
      - pattern-not: $DB.sequelize.query("...")
    message: Non-constant SQL query detected. Ensure this is not controlled by external
      data, otherwise this is a SQL injection.
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
      category: security
      technology:
        - sequelize
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query
      shortlink: https://sg.run/jRKP
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query
      semgrep.ruleset: owasp-top-ten
    severity: INFO
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
    patterns:
      - pattern-inside: |
          $PATH = require('path');
          ...
      - pattern-either:
          - pattern-inside: function $FUNC(...,$INPUT,...) {...}
          - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
          - pattern: $PATH.join(...,<... $INPUT ...>,...)
          - pattern: $PATH.join(...,<... $INPUT.$FOO ...>,...)
          - pattern: $PATH.join(...,<... $INPUT.$FOO.$BAR ...>,...)
          - pattern: |
              $VAR = <... $INPUT ...>;
              ...
              $PATH.join(...,<... $VAR ...>,...);
          - pattern: |
              $VAR = <... $INPUT.$FOO ...>;
              ...
              $PATH.join(...,<... $VAR ...>,...);
          - pattern: |
              $VAR = <... $INPUT.$FOO.$BAR ...>;
              ...
              $PATH.join(...,<... $VAR ...>,...);
          - pattern: $PATH.resolve(...,<... $INPUT ...>,...)
          - pattern: $PATH.resolve(...,<... $INPUT.$FOO ...>,...)
          - pattern: $PATH.resolve(...,<... $INPUT.$FOO.$BAR ...>,...)
          - pattern: |
              $VAR = <... $INPUT ...>;
              ...
              $PATH.resolve(...,<... $VAR ...>,...);
          - pattern: |
              $VAR = <... $INPUT.$FOO ...>;
              ...
              $PATH.resolve(...,<... $VAR ...>,...);
          - pattern: |
              $VAR = <... $INPUT.$FOO.$BAR ...>;
              ...
              $PATH.resolve(...,<... $VAR ...>,...);
    message: Possible writing outside of the destination, make sure that the target
      path is nested in the intended destination
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A5: Broken Access Control'
      cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path
      Traversal)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
      shortlink: https://sg.run/OPqk
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
  - id: javascript.lang.security.audit.spawn-shell-true.spawn-shell-true
    patterns:
      - pattern-either:
          - pattern: |
              spawn(...,{shell: $SHELL})
          - pattern: |
              spawnSync(...,{shell: $SHELL})
          - pattern: |
              $CP.spawn(...,{shell: $SHELL})
          - pattern: |
              $CP.spawnSync(...,{shell: $SHELL})
      - pattern-not: |
          spawn(...,{shell: false})
      - pattern-not: |
          spawnSync(...,{shell: false})
      - pattern-not: |
          $CP.spawn(...,{shell: false})
      - pattern-not: |
          $CP.spawnSync(...,{shell: false})
    message: 'Found ''$SPAWN'' with ''{shell: $SHELL}''. This is dangerous because this
    call will spawn the command using a shell process. Doing so propagates current
    shell settings and variables, which makes it much easier for a malicious actor
    to execute commands. Use ''{shell: false}'' instead.'
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.spawn-shell-true.spawn-shell-true
      shortlink: https://sg.run/Wgeo
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.spawn-shell-true.spawn-shell-true
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
    patterns:
      - pattern-inside: |
          $UNK = $ANYFUNC(...);
          ...
          $OTHERFUNC(..., <... $UNK ...>, ...);
      - pattern: $OTHERFUNC(..., <... "=~/.*<script.*/" ...>, ...)
    message: Cannot determine what '$UNK' is and it is used with a '<script>' tag. This
      could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally
      controlled, or sanitize this data.
    metadata:
      owasp: 'A7: Cross-Site Scripting (XSS)'
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      references:
        - https://www.developsec.com/2017/11/09/xss-in-a-script-tag/
        - https://github.com/bkimminich/juice-shop/blob/master/routes/videoHandler.js#L64
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
      shortlink: https://sg.run/1Zy1
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
    message: Make sure that unverified user data can not reach vm.runInContext.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
      shortlink: https://sg.run/9oey
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern-either:
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $VM.runInContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
  - id: javascript.lang.security.audit.vm-injection.vm-runinnewcontext-context-injection
    message: Make sure that unverified user data can not reach vm.runInNewContext.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-context-injection
      shortlink: https://sg.run/ydbA
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern-either:
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VM.runInNewContext($CODE,<... $INPUT ...>,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $VM.runInNewContext($CODE,<... $INPUT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
          - pattern: |
              function $FUNC(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $VM.runInNewContext($CODE,<... $CONTEXT ...>,...);
                ...
              }
  - id: javascript.lang.security.audit.vm-injection.vm-compilefunction-context-injection
    message: Make sure that unverified user data can not reach vm.compileFunction.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-compilefunction-context-injection
      shortlink: https://sg.run/rd2J
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-compilefunction-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern-either:
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $INPUT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $OPTS = {parsingContext: <... $INPUT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $OPTS = {parsingContext: <... $CONTEXT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $OPTS = {parsingContext: <... $CONTEXT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $OPTS = {parsingContext: <... $CONTEXT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $INPUT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,{parsingContext: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $OPTS = {parsingContext: <... $INPUT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $OPTS = {parsingContext: <... $CONTEXT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $OPTS = {parsingContext: <... $CONTEXT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $OPTS = {parsingContext: <... $CONTEXT ...>};
                ...
                $VM.compileFunction($CODE,$PARAMS,$OPTS,...);
                ...
              }
  - id: javascript.lang.security.audit.vm-injection.vm-script-code-injection
    message: Make sure that unverified user data can not reach vm.Script.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-script-code-injection
      shortlink: https://sg.run/b75v
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-script-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern: new $VM.Script($CODE,...)
      - pattern-not: new $VM.Script("...",...)
      - pattern-not-inside: |-
          $CODE = "...";
          ...
  - id: javascript.lang.security.audit.vm-injection.vm-sourcetextmodule-code-injection
    message: Make sure that unverified user data can not reach vm.SourceTextModule.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-sourcetextmodule-code-injection
      shortlink: https://sg.run/0ngr
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-sourcetextmodule-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern: new $VM.SourceTextModule($CODE,...)
      - pattern-not: new $VM.SourceTextModule("...",...)
      - pattern-not-inside: |-
          $CODE = "...";
          ...
  - id: javascript.lang.security.audit.vm-injection.vm-runincontext-code-injection
    message: Make sure that unverified user data can not reach vm.runInContext.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runincontext-code-injection
      shortlink: https://sg.run/N4pN
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runincontext-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern: $VM.runInContext($CODE,...)
      - pattern-not: $VM.runInContext("...",...)
      - pattern-not-inside: |
          $CODE = "...";
          ...
  - id: javascript.lang.security.audit.vm-injection.vm-runinnewcontext-code-injection
    message: Make sure that unverified user data can not reach vm.runInNewContext.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-code-injection
      shortlink: https://sg.run/kX7A
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern: $VM.runInNewContext($CODE,...)
      - pattern-not: $VM.runInNewContext("...",...)
      - pattern-not-inside: |
          $CODE = "...";
          ...
  - id: javascript.lang.security.audit.vm-injection.vm-runinthiscontext-code-injection
    message: Make sure that unverified user data can not reach vm.runInThisContext.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinthiscontext-code-injection
      shortlink: https://sg.run/we7d
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinthiscontext-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern: $VM.runInThisContext($CODE,...)
      - pattern-not: $VM.runInThisContext("...",...)
      - pattern-not-inside: |
          $CODE = "...";
          ...
  - id: javascript.lang.security.audit.vm-injection.vm-compilefunction-code-injection
    message: Make sure that unverified user data can not reach vm.compileFunction.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-compilefunction-code-injection
      shortlink: https://sg.run/x17y
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-compilefunction-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm');
          ...
      - pattern: $VM.compileFunction($CODE,...)
      - pattern-not: $VM.compileFunction("...",...)
      - pattern-not-inside: |-
          $CODE = "...";
          ...
  - id: javascript.lang.security.detect-child-process.detect-child-process
    metadata:
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process
      shortlink: https://sg.run/l2lo
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process
      semgrep.ruleset: owasp-top-ten
    message: Detected non-literal calls to $EXEC(). This could lead to a command injection
      vulnerability.
    patterns:
      - pattern-either:
          - pattern: exec($CMD,...)
          - pattern: execSync($CMD,...)
          - pattern: spawn($CMD,...)
          - pattern: spawnSync($CMD,...)
      - pattern-not-inside: $EXEC("...",...)
      - pattern-not-inside: $EXEC(["...",...],...)
      - pattern-not-inside: |
          $CMD = "..."
          ...
      - pattern-not-inside: |
          $CMD = ["...",...]
          ...
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape
    metadata:
      cwe: 'CWE-116: Improper Encoding or Escaping of Output'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
      category: security
      technology:
        - mustache
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape
      shortlink: https://sg.run/Yvwd
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape
      semgrep.ruleset: owasp-top-ten
    message: Markup escaping disabled. This can be used with some template engines to
      escape disabling of HTML entities, which can lead to XSS attacks.
    pattern: $OBJ.escapeMarkup = false
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression
    metadata:
      cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression
      shortlink: https://sg.run/6nwK
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression
      semgrep.ruleset: owasp-top-ten
    message: Detected eval(variable), which could allow a malicious actor to run arbitrary
      code.
    patterns:
      - pattern-either:
          - pattern: eval($OBJ)
          - pattern: window.eval($OBJ)
          - pattern: Function(...,$OBJ)
          - pattern: new Function(...,$OBJ)
      - pattern-not: eval("...")
      - pattern-not: window.eval("...")
      - pattern-not: Function(...,"...")
      - pattern-not: new Function(...,"...")
      - pattern-not-inside: |
          $OBJ = "..."
          ...
          $SOMETHING(..., $OBJ, ...)
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.detect-non-literal-require.detect-non-literal-require
    metadata:
      cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-require.js
      category: security
      technology:
        - javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.detect-non-literal-require.detect-non-literal-require
      shortlink: https://sg.run/zvNn
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.detect-non-literal-require.detect-non-literal-require
      semgrep.ruleset: owasp-top-ten
    message: Detected the use of require(variable). Calling require with a non-literal
      argument might allow an attacker to load an run arbitrary code, or access arbitrary
      files.
    patterns:
      - pattern: require($OBJ)
      - pattern-not: require('...')
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: javascript.lang.security.spawn-git-clone.spawn-git-clone
    message: Git allows shell commands to be specified in ext URLs for remote repositories.
      For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command
      to try to connect to a remote repository. Make sure that the URL is not controlled
      by external input.
    metadata:
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (''OS Command Injection'')'
      owasp: 'A1: Injection'
      category: security
      technology:
        - git
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone
      shortlink: https://sg.run/2xrr
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: ERROR
    patterns:
      - pattern-either:
          - pattern: spawn('git', ['clone',...,$F])
          - pattern: $X.spawn('git', ['clone',...,$F])
          - pattern: spawn('git', ['clone',...,$P,$F])
          - pattern: $X.spawn('git', ['clone',...,$P,$F])
      - pattern-not: spawn('git', ['clone',...,"..."])
      - pattern-not: $X.spawn('git', ['clone',...,"..."])
      - pattern-not: spawn('git', ['clone',...,"...","..."])
      - pattern-not: $X.spawn('git', ['clone',...,"...","..."])
  - id: javascript.node-expat.security.audit.expat-xxe.expat-xxe
    message: If unverified user data can reach the XML Parser it can result in XML External
      or Internal Entity (XXE) Processing vulnerabilities
    metadata:
      owasp: 'A4: XML External Entities (XXE)'
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      category: security
      technology:
        - node-expat
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe
      shortlink: https://sg.run/eLdL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-either:
          - pattern: |
              var $EXPAT = require('node-expat');
              ...
              new $EXPAT.Parser(...);
              ...
              $PARSER.parse(...);
          - pattern: |
              var $EXPAT = require('node-expat');
              ...
              new $EXPAT.Parser(...);
              ...
              $PARSER.write(...);
          - pattern: |
              require('node-expat');
              ...
              new Parser(...);
              ...
              $PARSER.parse(...);
          - pattern: |
              require('node-expat');
              ...
              new Parser(...);
              ...
              $PARSER.write(...);
      - pattern-not: |
          var $EXPAT = require('node-expat');
          ...
          new $EXPAT.Parser(...);
          ...
          $PARSER.parse("...");
      - pattern-not: |
          var $EXPAT = require('node-expat');
          ...
          new $EXPAT.Parser(...);
          ...
          $PARSER.write("...");
      - pattern-not: |
          require('node-expat');
          ...
          new Parser(...);
          ...
          $PARSER.parse("...");
      - pattern-not: |
          require('node-expat');
          ...
          new Parser(...);
          ...
          $PARSER.write("...");
      - pattern-not: |
          $X = "...";
          ...
          $PARSER.parse($X);
      - pattern-not: |-
          $X = "...";
          ...
          $PARSER.write($X);
  - id: javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret
    message: 'Hardcoded secret used for Passport Strategy. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables: process.env.SECRET)'
    metadata:
      cwe: 'CWE-522: Insufficiently Protected Credentials'
      owasp: 'A2: Broken Authentication'
      source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      asvs:
        section: 'V3: Session Management Verification Requirements'
        control_id: 3.5.2 Static API keys or secret
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
        version: '4'
      category: security
      technology:
        - jwt
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret
      shortlink: https://sg.run/vz70
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: ERROR
    pattern-either:
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          new $F({clientSecret: "..."}, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          var $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          var $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          var $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-auth0").Strategy;
          ...
          $S = "...";
          ...
          $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          new $F({clientSecret: "..."}, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          var $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          var $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          var $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth2").Strategy;
          ...
          $S = "...";
          ...
          $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          new $F({secretOrKey: "..."}, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          var $P = {};
          ...
          $P.secretOrKey = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          var $P = {secretOrKey: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          var $S = "...";
          ...
          new $F({secretOrKey: $S}, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.secretOrKey = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {secretOrKey: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          $P = {};
          ...
          $P.secretOrKey = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          $P = {secretOrKey: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          $S = "...";
          ...
          new $F({secretOrKey: $S}, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.secretOrKey = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          $S = "...";
          ...
          var $P = {secretOrKey: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.secretOrKey = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-jwt").Strategy;
          ...
          $S = "...";
          ...
          $P = {secretOrKey: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          new $F({consumerSecret: "..."}, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          var $P = {};
          ...
          $P.consumerSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          var $P = {consumerSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          var $S = "...";
          ...
          new $F({consumerSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          $P = {};
          ...
          $P.consumerSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          $P = {consumerSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          $S = "...";
          ...
          new $F({consumerSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          $S = "...";
          ...
          var $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-google-oauth1").Strategy;
          ...
          $S = "...";
          ...
          $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          new $F({clientSecret: "..."}, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          var $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          var $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          var $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth2").Strategy;
          ...
          $S = "...";
          ...
          $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          new $F({clientSecret: "..."}, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          var $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          var $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          var $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          $P = {};
          ...
          $P.clientSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          $P = {clientSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          $S = "...";
          ...
          new $F({clientSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          $S = "...";
          ...
          var $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.clientSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-facebook").Strategy;
          ...
          $S = "...";
          ...
          $P = {clientSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          new $F({consumerSecret: "..."}, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          var $P = {};
          ...
          $P.consumerSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          var $P = {consumerSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          var $S = "...";
          ...
          new $F({consumerSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          $P = {};
          ...
          $P.consumerSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          $P = {consumerSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          $S = "...";
          ...
          new $F({consumerSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          $S = "...";
          ...
          var $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-twitter").Strategy;
          ...
          $S = "...";
          ...
          $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          new $F({consumerSecret: "..."}, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          var $P = {};
          ...
          $P.consumerSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          var $P = {consumerSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          var $S = "...";
          ...
          new $F({consumerSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          var $S = "...";
          ...
          var $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          $P = {};
          ...
          $P.consumerSecret = "...";
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          $P = {consumerSecret: "..."};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          $S = "...";
          ...
          new $F({consumerSecret: $S}, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          $S = "...";
          ...
          var $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          $S = "...";
          ...
          var $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
      - pattern: |
          var $F = require("passport-oauth1").Strategy;
          ...
          $S = "...";
          ...
          $P = {};
          ...
          $P.consumerSecret = $S;
          ...
          new $F($P, ...);
      - pattern: |-
          var $F = require("passport-oauth1").Strategy;
          ...
          $S = "...";
          ...
          $P = {consumerSecret: $S};
          ...
          new $F($P, ...);
  - id: javascript.phantom.security.audit.phantom-injection.phantom-injection
    message: If unverified user data can reach the `phantom` page methods it can result
      in Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - phantom
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.phantom.security.audit.phantom-injection.phantom-injection
      shortlink: https://sg.run/dKv0
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.phantom.security.audit.phantom-injection.phantom-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $PHANTOM = require('phantom');
          ...
      - pattern-either:
          - pattern: $PAGE.open($INPUT,...)
          - pattern: $PAGE.property("content",$INPUT,...)
          - pattern: $PAGE.setContent($INPUT,...)
          - pattern: $PAGE.openUrl($INPUT,...)
          - pattern: $PAGE.evaluateJavaScript($INPUT,...)
      - pattern-not: $PAGE.open("...",...)
      - pattern-not: $PAGE.property("content","...",...)
      - pattern-not: $PAGE.setContent("...",...)
      - pattern-not: $PAGE.openUrl("...",...)
      - pattern-not: $PAGE.evaluateJavaScript("...",...)
  - id: javascript.playwright.security.audit.playwright-addinitscript-code-injection.playwright-addinitscript-code-injection
    message: If unverified user data can reach the `addInitScript` method it can result
      in Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - playwright
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-addinitscript-code-injection.playwright-addinitscript-code-injection
      shortlink: https://sg.run/Zv94
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-addinitscript-code-injection.playwright-addinitscript-code-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('playwright');
          ...
      - pattern-not-inside: |
          var $INPUT = function $FNAME(...){...};
          ...
      - pattern: $CONTEXT.addInitScript($INPUT,...)
      - pattern-not: $CONTEXT.addInitScript("...",...)
      - pattern-not: $CONTEXT.addInitScript(function(...){...},...)
  - id: javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection
    message: If unverified user data can reach the `evaluate` method it can result in
      Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - playwright
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection
      shortlink: https://sg.run/ndgr
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('playwright');
          ...
      - pattern-either:
          - pattern-inside: function $FUNC (...,$INPUT,...) {...}
          - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
          - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
          - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
  - id: javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
    message: If unverified user data can reach the `evaluate` method it can result in
      Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - playwright
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
      shortlink: https://sg.run/EkJB
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('playwright');
          ...
      - pattern-not-inside: |
          var $INPUT = function $FNAME(...){...};
          ...
      - pattern-either:
          - pattern: $PAGE.evaluate($INPUT,...)
          - pattern: $PAGE.evaluateHandle($INPUT,...)
          - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
      - pattern-not: $PAGE.evaluate("...",...)
      - pattern-not: $PAGE.evaluate(function(...){...},...)
      - pattern-not: $PAGE.evaluateHandle("...",...)
      - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
      - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
      - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
  - id: javascript.playwright.security.audit.playwright-exposed-chrome-devtools.playwright-exposed-chrome-devtools
    message: Remote debugging protocol does not perform any authentication, so exposing
      it too widely can be a security risk.
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - playwright
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-exposed-chrome-devtools.playwright-exposed-chrome-devtools
      shortlink: https://sg.run/7oEQ
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-exposed-chrome-devtools.playwright-exposed-chrome-devtools
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('playwright');
          ...
      - pattern-either:
          - pattern-regex: --remote-debugging-address
          - pattern-regex: --remote-debugging-port
          - pattern-regex: --remote-debugging-socket-name
          - pattern-regex: --remote-debugging-targets
  - id: javascript.playwright.security.audit.playwright-goto-injection.playwright-goto-injection
    message: If unverified user data can reach the `goto` method it can result in Server-Side
      Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - playwright
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-goto-injection.playwright-goto-injection
      shortlink: https://sg.run/LwWY
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-goto-injection.playwright-goto-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('playwright');
          ...
      - pattern-not-inside: |
          require('playwright');
          ...
          var $INPUT = "...";
          ...
          $PAGE.goto($INPUT,...)
      - pattern: $PAGE.goto($INPUT,...)
      - pattern-not: $PAGE.goto("...",...)
  - id: javascript.playwright.security.audit.playwright-setcontent-injection.playwright-setcontent-injection
    message: If unverified user data can reach the `setContent` method it can result
      in Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - playwright
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-setcontent-injection.playwright-setcontent-injection
      shortlink: https://sg.run/8yEQ
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-setcontent-injection.playwright-setcontent-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('playwright');
          ...
      - pattern-not-inside: |
          require('playwright');
          ...
          var $INPUT = "...";
          ...
          $PAGE.setContent($INPUT,...)
      - pattern: $PAGE.setContent($INPUT,...)
      - pattern-not: $PAGE.setContent("...",...)
  - id: javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection.puppeteer-evaluate-arg-injection
    message: If unverified user data can reach the `evaluate` method it can result in
      Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - puppeteer
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection.puppeteer-evaluate-arg-injection
      shortlink: https://sg.run/gLQ5
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection.puppeteer-evaluate-arg-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('puppeteer');
          ...
      - pattern-either:
          - pattern-inside: function $FUNC (...,$INPUT,...) {...}
          - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
          - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
          - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
          - pattern: $PAGE.evaluateOnNewDocument($CODE,...,<... $INPUT ...>,...)
  - id: javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection.puppeteer-evaluate-code-injection
    message: If unverified user data can reach the `evaluate` method it can result in
      Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - puppeteer
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection.puppeteer-evaluate-code-injection
      shortlink: https://sg.run/Q5Yq
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection.puppeteer-evaluate-code-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('puppeteer');
          ...
      - pattern-not-inside: |
          var $INPUT = function $FNAME(...){...};
          ...
      - pattern-either:
          - pattern: $PAGE.evaluate($INPUT,...)
          - pattern: $PAGE.evaluateHandle($INPUT,...)
          - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
      - pattern-not: $PAGE.evaluate("...",...)
      - pattern-not: $PAGE.evaluate(function(...){...},...)
      - pattern-not: $PAGE.evaluateHandle("...",...)
      - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
      - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
      - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
  - id: javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools.puppeteer-exposed-chrome-devtools
    message: Remote debugging protocol does not perform any authentication, so exposing
      it too widely can be a security risk.
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - puppeteer
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools.puppeteer-exposed-chrome-devtools
      shortlink: https://sg.run/3xEW
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools.puppeteer-exposed-chrome-devtools
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('puppeteer');
          ...
      - pattern-either:
          - pattern-regex: --remote-debugging-address
          - pattern-regex: --remote-debugging-port
          - pattern-regex: --remote-debugging-socket-name
          - pattern-regex: --remote-debugging-targets
  - id: javascript.puppeteer.security.audit.puppeteer-goto-injection.puppeteer-goto-injection
    message: If unverified user data can reach the `goto` method it can result in Server-Side
      Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - puppeteer
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-goto-injection.puppeteer-goto-injection
      shortlink: https://sg.run/4xE9
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-goto-injection.puppeteer-goto-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('puppeteer');
          ...
      - pattern-not-inside: |
          require('puppeteer');
          ...
          var $INPUT = "...";
          ...
          $PAGE.goto($INPUT,...)
      - pattern: $PAGE.goto($INPUT,...)
      - pattern-not: $PAGE.goto("...",...)
  - id: javascript.puppeteer.security.audit.puppeteer-setcontent-injection.puppeteer-setcontent-injection
    message: If unverified user data can reach the `setContent` method it can result
      in Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - puppeteer
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-setcontent-injection.puppeteer-setcontent-injection
      shortlink: https://sg.run/PJlv
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-setcontent-injection.puppeteer-setcontent-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('puppeteer');
          ...
      - pattern-not-inside: |
          require('puppeteer');
          ...
          var $INPUT = "...";
          ...
      - pattern: $PAGE.setContent($INPUT,...)
      - pattern-not: $PAGE.setContent("...",...)
  - id: javascript.sandbox.security.audit.sandbox-code-injection.sandbox-code-injection
    message: Make sure that unverified user data can not reach `sandbox`.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - sandbox
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.sandbox.security.audit.sandbox-code-injection.sandbox-code-injection
      shortlink: https://sg.run/J9BP
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.sandbox.security.audit.sandbox-code-injection.sandbox-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $SANDBOX = require('sandbox');
          ...
      - pattern-not-inside: |
          $CODE = "...";
          ...
      - pattern-either:
          - patterns:
              - pattern-inside: |
                  $S = new $SANDBOX(...);
                  ...
              - pattern: $S.run($CODE,...);
          - pattern: |
              new $SANDBOX(...).run($CODE,...);
      - pattern-not-inside: |
          $S = new $SANDBOX(...);
          ...
          $S.run("...",...);
      - pattern-not-inside: new $SANDBOX(...).run("...",...);
  - id: javascript.sax.security.audit.sax-xxe.sax-xxe
    message: Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do
      anything with custom DTD entity definitions. If you're implementing a custom DTD
      entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities,
      or be absolutely sure that external entities received from a trusted source while
      processing XML.
    metadata:
      owasp: 'A4: XML External Entities (XXE)'
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      references:
        - https://github.com/Leonidas-from-XIV/node-xml2js/issues/415
        - https://github.com/isaacs/sax-js
      category: security
      technology:
        - sax
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe
      shortlink: https://sg.run/5QEj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    pattern-either:
      - pattern: |
          require('sax');
          ...
          $PARSER.ondoctype = ...;
      - pattern: |-
          require('sax');
          ...
          $PARSER.on('doctype',...);
  - id: javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls
    message: 'If TLS is disabled on server side (Postgresql server), Sequelize establishes
    connection without TLS and no error will be thrown. To prevent MITN (Man In The
    Middle) attack, TLS must be enforce by Sequelize. Set "ssl: true" or define settings
    "ssl: {...}"'
    metadata:
      owasp: 'A6: Security Misconfiguration'
      references:
        - https://node-postgres.com/features/ssl
        - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
        - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
        - https://nodejs.org/api/tls.html#tls_tls_default_min_version
      category: security
      technology:
        - sequelize
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls
      shortlink: https://sg.run/yz6Z
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    patterns:
      - pattern: |
          {
            host: $HOST,
            database: $DATABASE,
            dialect: $DIALECT
           }
      - pattern-not: |
          {
            host: $HOST,
            database: $DATABASE,
            dialect: "postgres",
            dialectOptions: {
                ssl: true
            }
          }
      - pattern-not: |
          {
            host: $HOST,
            database: $DATABASE,
            dialect: $DIALECT,
            dialectOptions: {
              ssl: { ... }
            }
          }
      - metavariable-regex:
          metavariable: $DIALECT
          regex: '[''"](mariadb|mysql|postgres)[''"]'
  - id: javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query
    message: 'Avoiding SQL string concatenation: untrusted input concatenated with raw
    SQL query can result in SQL Injection. Data replacement or data binding should
    be used. See https://sequelize.org/master/manual/raw-queries.html'
    metadata:
      category: security
      technology:
        - sequelize
      cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
      owasp: 'A1: Injection'
      references:
        - https://sequelize.org/master/manual/raw-queries.html
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query
      shortlink: https://sg.run/GeG6
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-raw-query.sequelize-raw-query
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    pattern-either:
      - pattern: |
          $DATABASE.sequelize.query(`...${...}...`, ...)
      - pattern: |
          $QUERY = `...${...}...`
          ...
          $DATABASE.sequelize.query($QUERY, ...)
      - pattern: |
          $DATABASE.sequelize.query($SQL + $VALUE, ...)
      - pattern: |
          $QUERY = $SQL + $VALUE
          ...
          $DATABASE.sequelize.query($QUERY, ...)
  - id: javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation.sequelize-tls-disabled-cert-validation
    message: Set "rejectUnauthorized" to false is a convenient way to resolve certificate
      error. But this method is unsafe because it disables the server certificate verification,
      making the Node app open to MITM attack. "rejectUnauthorized" option must be alway
      set to True (default value). With self -signed certificate or custom CA, use "ca"
      option to define Root Certificate. This rule checks TLS configuration only for
      Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration.
      This rule could be extended for MSSQL, but the dialectOptions is specific for
      Tedious.
    metadata:
      cwe: |
        CWE-295: Improper Certificate Validation
      owasp: 'A6: Security Misconfiguration'
      references:
        - https://node-postgres.com/features/ssl
        - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
        - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
      category: security
      technology:
        - sequelize
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation.sequelize-tls-disabled-cert-validation
      shortlink: https://sg.run/rAkj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation.sequelize-tls-disabled-cert-validation
      semgrep.ruleset: owasp-top-ten
    severity: ERROR
    languages:
      - javascript
      - typescript
    patterns:
      - pattern: |
          {
            host: $HOST,
            database: $DATABASE,
            dialect: $DIALECT,
            dialectOptions: {
              ssl: {
                rejectUnauthorized: false
              }
            }
           }
      - metavariable-regex:
          metavariable: $DIALECT
          regex: '[''"](mariadb|mysql|postgres)[''"]'
  - id: javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
    message: TLS1.0 and TLS1.1 are deprecated and should be used anymore. By default,
      NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1.
      Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for
      Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration.
      This rule could be extended for MSSQL, but the dialectOptions is specific for
      Tedious.
    metadata:
      owasp: 'A6: Security Misconfiguration'
      references:
        - https://node-postgres.com/features/ssl
        - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
        - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
        - https://nodejs.org/api/tls.html#tls_tls_default_min_version
      category: security
      technology:
        - sequelize
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
      shortlink: https://sg.run/bDrq
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          {
            host: $HOST,
            database: $DATABASE,
            dialect: $DIALECT,
            dialectOptions:
              { ssl: ... }
           }
      - pattern-either:
          - pattern: |
              {
                minVersion: 'TLSv1'
              }
          - pattern: |
              {
                minVersion: 'TLSv1.1'
              }
      - metavariable-regex:
          metavariable: $DIALECT
          regex: '[''"](mariadb|mysql|postgres)[''"]'
  - id: javascript.serialize-javascript.security.audit.unsafe-serialize-javascript.unsafe-serialize-javascript
    message: '`serialize-javascript` used with `unsafe` parameter, this could be vulnerable
    to XSS.'
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page'
      category: security
      technology:
        - serialize-javascript
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.serialize-javascript.security.audit.unsafe-serialize-javascript.unsafe-serialize-javascript
      shortlink: https://sg.run/Ro6N
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.serialize-javascript.security.audit.unsafe-serialize-javascript.unsafe-serialize-javascript
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $S = require('serialize-javascript');
          ...
      - pattern-not-inside: escape(...)
      - pattern-not-inside: encodeURI(...)
      - pattern: |
          $S(..., {unsafe: true});
  - id: javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection
    message: If unverified user data can reach the `exec` method it can result in Remote
      Code Execution
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-78: Improper Neutralization of Special Elements used in an OS Command
      (OS Command Injection)'
      category: security
      technology:
        - shelljs
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection
      shortlink: https://sg.run/AvEB
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          require('shelljs');
          ...
      - pattern-not-inside: |
          require('shelljs');
          ...
          var $INPUT = "...";
          ...
      - pattern: $SHELL.exec($INPUT,...)
      - pattern-not: $SHELL.exec("...",...)
  - id: javascript.thenify.security.audit.multiargs-code-execution.multiargs-code-execution
    patterns:
      - pattern-either:
          - pattern: |
              $THENIFY($FN, {multiArgs: ...},...)
          - pattern: |
              $OPTS = {multiArgs: ...};
              ...
              $THENIFY($FN,$OPTS,...);
      - pattern-not: |
          $THENIFY($FN, {multiArgs: false},...)
      - pattern-not: |
          $OPTS = {multiArgs: false};
          ...
          $THENIFY($FN,$OPTS,...)
      - pattern-either:
          - pattern-inside: |
              $THENIFY = require('thenify');
              ...
          - pattern-inside: |
              import 'thenify';
              ...
    message: Potential arbitrary code execution, piped to eval
    metadata:
      cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
      owasp: 'A1: Injection'
      category: security
      technology:
        - thenify
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.thenify.security.audit.multiargs-code-execution.multiargs-code-execution
      shortlink: https://sg.run/BkER
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.thenify.security.audit.multiargs-code-execution.multiargs-code-execution
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: javascript.vm2.security.audit.vm2-code-injection.vm2-code-injection
    message: Make sure that unverified user data can not reach `vm2`.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - vm2
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.vm2.security.audit.vm2-code-injection.vm2-code-injection
      shortlink: https://sg.run/DoPG
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.vm2.security.audit.vm2-code-injection.vm2-code-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          require('vm2');
          ...
      - pattern-not-inside: |
          $CODE = "...";
          ...
      - pattern-not-inside: |
          require('vm2');
          ...
          $CODE = new VMScript(...);
          ...
      - pattern-either:
          - pattern: |
              $VM = new VM(...);
              ...
              $VM.run($CODE,...);
          - pattern: |
              new VM(...).run($CODE,...);
          - pattern: |
              $VM = new NodeVM(...);
              ...
              $VM.run($CODE,...);
          - pattern: |
              new NodeVM(...).run($CODE,...);
          - pattern: |
              new VMScript($CODE,...);
      - pattern-not: |
          $VM = new VM(...);
          ...
          $VM.run("...",...);
      - pattern-not: |
          $VM = new NodeVM(...);
          ...
          $VM.run("...",...);
      - pattern-not: |
          (new VM(...)).run("...",...);
      - pattern-not: |
          (new NodeVM(...)).run("...",...);
      - pattern-not: new VMScript("...",...);
  - id: javascript.vm2.security.audit.vm2-context-injection.vm2-context-injection
    message: Make sure that unverified user data can not reach `vm2`.
    severity: WARNING
    languages:
      - javascript
      - typescript
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-94: Improper Control of Generation of Code (Code Injection)'
      category: security
      technology:
        - vm2
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.vm2.security.audit.vm2-context-injection.vm2-context-injection
      shortlink: https://sg.run/W8XE
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.vm2.security.audit.vm2-context-injection.vm2-context-injection
      semgrep.ruleset: owasp-top-ten
    patterns:
      - pattern-inside: |
          $VM = require('vm2');
          ...
      - pattern-either:
          - pattern: |
              function (...,$INPUT,...) {
                ...
                new VM({sandbox: <... $INPUT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $OPTS = {sandbox: <... $INPUT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                new VM({sandbox: <... $INPUT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                new VM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $OPTS = {sandbox: <... $INPUT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new VM($OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                new NodeVM({sandbox: <... $INPUT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $OPTS = {sandbox: <... $INPUT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
          - pattern: |
              function (...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                new NodeVM({sandbox: <... $INPUT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... {$NAME:$INPUT} ...>;
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                new NodeVM({sandbox: <... $CONTEXT ...>},...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $OPTS = {sandbox: <... $INPUT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = <... $INPUT ...>;
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
          - pattern: |
              function $F(...,$INPUT,...) {
                ...
                $CONTEXT = {$NAME: <... $INPUT ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
          - pattern: |-
              function $F(...,$INPUT,...) {
                ...
                $VAR = <... $INPUT ...>;
                ...
                $CONTEXT = {$NAME: <... $VAR ...>};
                ...
                $OPTS = {sandbox: <... $CONTEXT ...>};
                ...
                new NodeVM($OPTS,...);
                ...
              }
  - id: javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection.wkhtmltoimage-injection
    message: If unverified user data can reach the `wkhtmltoimage` it can result in
      Server-Side Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - wkhtmltoimage
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection.wkhtmltoimage-injection
      shortlink: https://sg.run/KlDn
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection.wkhtmltoimage-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $WK = require('wkhtmltoimage');
          ...
      - pattern-not-inside: |
          var $INPUT = "...";
          ...
      - pattern: $WK.generate($INPUT,...)
      - pattern-not: $WK.generate("...",...)
  - id: javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection.wkhtmltopdf-injection
    message: If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side
      Request Forgery vulnerabilities
    severity: WARNING
    metadata:
      owasp: 'A1: Injection'
      cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'
      category: security
      technology:
        - wkhtmltopdf
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection.wkhtmltopdf-injection
      shortlink: https://sg.run/qx8O
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection.wkhtmltopdf-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    patterns:
      - pattern-inside: |
          $WK = require('wkhtmltopdf');
          ...
      - pattern-not-inside: |
          var $INPUT = "...";
          ...
      - pattern: $WK($INPUT,...)
      - pattern-not: $WK("...",...)
  - id: javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe
    message: If unverified user data can reach the XML Parser it can result in XML External
      or Internal Entity (XXE) Processing vulnerabilities
    metadata:
      owasp: 'A4: XML External Entities (XXE)'
      cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
      asvs:
        section: V5 Validation, Sanitization and Encoding
        control_id: 5.5.2 Insecue XML Deserialization
        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
        version: '4'
      category: security
      technology:
        - xml2json
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe
      shortlink: https://sg.run/l27o
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    patterns:
      - pattern: |
          var $XML = require('xml2json');
          ...
          $XML.toJson(...);
      - pattern-not: |
          var $XML = require('xml2json');
          ...
          $XML.toJson("...",...);
      - pattern-not: |-
          var $XML = require('xml2json');
          ...
          var $S = "...";
          ...
          $XML.toJson($S,...);
  - id: java.spring.security.audit.spel-injection.spel-injection
    message: A Spring expression is built with a dynamic value. The source of the value(s)
      should be verified to avoid that unfiltered values fall into this risky code evaluation.
    metadata:
      cwe: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPEL_INJECTION
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection
      shortlink: https://sg.run/XBp4
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    patterns:
      - pattern-either:
          - pattern-inside: |
              class $CLASS {
                ...
                ExpressionParser $PARSER;
                ...
              }
          - pattern-inside: |
              class $CLASS {
                ...
                ExpressionParser $PARSER = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                ExpressionParser $PARSER = ...;
                ...
              }
          - pattern-inside: |
              class $CLASS {
                ...
                SpelExpressionParser $PARSER;
                ...
              }
          - pattern-inside: |
              class $CLASS {
                ...
                SpelExpressionParser $PARSER = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                SpelExpressionParser $PARSER = ...;
                ...
              }
          - pattern-inside: |
              class $CLASS {
                ...
                TemplateAwareExpressionParser $PARSER;
                ...
              }
          - pattern-inside: |
              class $CLASS {
                ...
                TemplateAwareExpressionParser $PARSER = ...;
                ...
              }
          - pattern-inside: |
              $X $METHOD(...) {
                ...
                TemplateAwareExpressionParser $PARSER = ...;
                ...
              }
      - pattern: |
          $X $METHOD(...) {
            ...
            $PARSER.parseExpression(...);
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            $PARSER.parseExpression("...");
            ...
          }
      - pattern-not: |
          $X $METHOD(...) {
            ...
            String $S = "...";
            ...
            $PARSER.parseExpression($S);
            ...
          }
  - id: java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled
    pattern: management.endpoints.web.exposure.include=*
    message: Spring Boot Actuator is fully enabled. This exposes sensitive endpoints
      such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless
      you have Spring Security enabled or another means to protect these endpoints,
      this functionality is available without authentication, causing a severe security
      risk.
    severity: WARNING
    languages:
      - generic
    paths:
      include:
        - '*properties'
    metadata:
      owasp: 'A6: Security Misconfiguration'
      references:
        - https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints
        - https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled
      shortlink: https://sg.run/L0vY
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled
      semgrep.ruleset: owasp-top-ten
  - id: java.spring.security.audit.spring-jsp-eval.spring-jsp-eval
    pattern: |
      <spring:eval ... expression=...>
    message: A Spring expression is built with a dynamic value. The source of the value(s)
      should be verified to avoid that unfiltered values fall into this risky code evaluation.
    severity: WARNING
    languages:
      - generic
    metadata:
      cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#JSP_SPRING_EVAL
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.spring.security.audit.spring-jsp-eval.spring-jsp-eval
      shortlink: https://sg.run/Q88o
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.spring.security.audit.spring-jsp-eval.spring-jsp-eval
      semgrep.ruleset: owasp-top-ten
    paths:
      include:
        - '*.jsp'
  - id: java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect
    message: Application redirects a user to a destination URL specified by a user supplied
      parameter that is not validated.
    metadata:
      cwe: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
      owasp: 'A1: Injection'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect
      shortlink: https://sg.run/9oXz
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
    pattern-either:
      - pattern: |
          $X $METHOD(...,String $URL,...) {
            return "redirect:" + $URL;
          }
      - pattern: |
          $X $METHOD(...,String $URL,...) {
            ...
            String $REDIR = "redirect:" + $URL;
            ...
            return $REDIR;
            ...
          }
      - pattern: |
          $X $METHOD(...,String $URL,...) {
            ...
            new ModelAndView("redirect:" + $URL);
            ...
          }
      - pattern: |-
          $X $METHOD(...,String $URL,...) {
            ...
            String $REDIR = "redirect:" + $URL;
            ...
            new ModelAndView($REDIR);
            ...
          }
  - id: java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping
    patterns:
      - pattern: |
          @RequestMapping(...)
          $RETURNTYPE $METHOD(...) { ... }
      - pattern-not-inside: |
          @RequestMapping(..., method = $X, ...)
          $RETURNTYPE $METHOD(...) { ... }
    message: Detected a method annotated with 'RequestMapping' that does not specify
      the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS,
      and by default all HTTP methods are allowed when the HTTP method is not explicitly
      specified. This means that a method that performs state changes could be vulnerable
      to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method
      (such as 'RequestMethod.POST').
    severity: WARNING
    metadata:
      cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'
      owasp: 'A6: Security Misconfiguration'
      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING
      references:
        - https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping
      shortlink: https://sg.run/2xlq
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
  - id: problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification
    message: Checks for redefinitions of functions that check TLS/SSL certificate verification.
      This can lead to vulnerabilities, as simple errors in the code can result in lack
      of proper certificate validation. This should only be used for debugging purposes
      because it leads to vulnerability to MTM attacks.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://stackoverflow.com/questions/4072585/disabling-ssl-certificate-validation-in-spring-resttemplate
        - https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification
      shortlink: https://sg.run/W822
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    pattern-either:
      - pattern: |
          new HostnameVerifier() {
            ...
            public boolean verify(String hostname, SSLSession session) {
              ...
            }
            ...
          };
      - pattern: |
          public RestTemplate restTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {
            ...
            TrustStrategy $FUNCNAME = (X509Certificate[] chain, String authType) -> ...;
            ...
          }
      - pattern: |
          TrustStrategy $FUNCNAME= new TrustStrategy() {
            ...
            public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
              ...
            }
            ...
          };
  - id: problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request
    message: Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory.
      FTP does not encrypt traffic, possibly leading to PII being sent plaintext over
      the network.
    fix-regex:
      regex: '[fF][tT][pP]://'
      replacement: sftp://
      count: 1
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request
      shortlink: https://sg.run/0Qzj
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    pattern-either:
      - pattern: |
          $SF = new DefaultFtpSessionFactory(...);
          ...
          $SF.setHost("=~/^[fF][tT][pP]://.*/");
          ...
          $SF.$FUNC(...);
      - pattern: |
          $SF = new DefaultFtpSessionFactory(...);
          ...
          String $URL = "=~/^[fF][tT][pP]://.*/";
          ...
          $SF.setHost($URL);
          ...
          $SF.$FUNC(...);
  - id: problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request
    patterns:
      - pattern-either:
          - pattern: |
              $RESTTEMP = new RestTemplate(...);
              ...
              $RESTTEMP.$FUNC("=~/[hH][tT][tT][pP]://.*/", ...);
          - pattern: |
              $RESTTEMP = new RestTemplate(...);
              ...
              String $URL = "=~/[hH][tT][tT][pP]://.*/";
              ...
              $RESTTEMP.$FUNC($URL, ...);
          - pattern: |
              $RESTTEMP = new RestTemplate(...);
              ...
              $URL = new URI(..., "=~/[hH][tT][tT][pP]://.*/", ...);
              ...
              $RESTTEMP.$FUNC($URL, ...);
      - metavariable-regex:
          metavariable: $FUNC
          regex: (delete|doExecute|exchange|getForEntity|getForObject|headForHeaders|optionsForAllow|patchForObject|postForEntity|postForLocation|postForObject|put)
    message: Checks for requests sent via Java Spring RestTemplate API to http:// URLS.
      This is dangerous because the server is attempting to connect to a website that
      does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.
    fix-regex:
      regex: '[Hh][Tt][Tt][Pp]://'
      replacement: https://
      count: 1
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-
        - https://www.baeldung.com/rest-template
      category: security
      technology:
        - spring
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request
      shortlink: https://sg.run/KlB5
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
  - id: problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification
    patterns:
      - pattern: |
          new X509TrustManager() {
            ...
            public void checkClientTrusted(X509Certificate[] certs, String authType) {...}
            ...
          }
      - pattern-not: |
          new X509TrustManager() {
            ...
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
              ...
              throw new CertificateException(...);
              ...
            }
            ...
          }
      - pattern-not: |
          new X509TrustManager() {
            ...
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
              ...
              throw new IllegalArgumentException(...);
              ...
            }
            ...
          }
    message: Checks for redefinitions of the checkServerTrusted function in the X509TrustManager
      class that disables TLS/SSL certificate verification. This should only be used
      for debugging purposes because it leads to vulnerability to MTM attacks.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://riptutorial.com/java/example/16517/temporarily-disable-ssl-verification--for-testing-purposes-
        - https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification
      shortlink: https://sg.run/qxD7
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
  - id: problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1
    patterns:
      - pattern: |
          new SSLConnectionSocketFactory(...);
      - pattern-not: |
          new SSLConnectionSocketFactory(..., new String[] {"TLSv1.2", "TLSv1.3"}, ...);
      - pattern-not: |
          new SSLConnectionSocketFactory(..., new String[] {"TLSv1.3", "TLSv1.2"}, ...);
      - pattern-not: |
          new SSLConnectionSocketFactory(..., new String[] {"TLSv1.3"}, ...);
      - pattern-not: |
          new SSLConnectionSocketFactory(..., new String[] {"TLSv1.2"}, ...);
    message: Detects direct creations of SSLConnectionSocketFactories that don't disallow
      SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity
      of the HTTPS server against a list of trusted certificates. These protocols are
      deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1
      shortlink: https://sg.run/l25E
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
  - id: problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2
    patterns:
      - pattern: |
          java.lang.System.setProperty("jdk.tls.client.protocols", "...");
      - pattern-not: |
          java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.2,TLSv1.3");
      - pattern-not: |
          java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.3,TLSv1.2");
      - pattern-not: |
          java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.3");
      - pattern-not: |
          java.lang.System.setProperty("jdk.tls.client.protocols", "TLSv1.2");
    message: Detects setting client protocols to insecure versions of TLS and SSL. These
      protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2
      shortlink: https://sg.run/Yvjy
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - java
  - id: problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request
    message: Checks for outgoing connections to ftp servers. FTP does not encrypt traffic,
      possibly leading to PII being sent plaintext over the network.
    fix-regex:
      regex: '[fF][tT][pP]://'
      replacement: sftp://
      count: 1
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://www.codejava.net/java-se/ftp/connect-and-login-to-a-ftp-server
        - https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request
      shortlink: https://sg.run/6n91
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    pattern-either:
      - pattern: |
          FTPClient $FTPCLIENT = new FTPClient();
          ...
          $FTPCLIENT.connect(...);
      - pattern: |
          URL $URL = new URL("=~/^[fF][tT][pP]://.*/");
          ...
          URLConnection $CONN = $URL.openConnection(...);
  - id: problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request
    pattern-either:
      - patterns:
          - pattern: |
              URI.create("=~/[hH][tT][tT][pP]://.*/", ...)
          - pattern-inside: |
              HttpClient $CLIENT = ...;
              ...
              HttpRequest $REQ = ...;
              ...
              $CLIENT.sendAsync(...);
      - patterns:
          - pattern: |
              URI.create("=~/[hH][tT][tT][pP]://.*/", ...)
          - pattern-inside: |
              HttpClient $CLIENT = ...;
              ...
              HttpRequest $REQ = ...;
              ...
              $CLIENT.send(...);
      - patterns:
          - pattern: |
              URI.create($URI)
          - pattern-inside: |
              String $URI = "=~/[hH][tT][tT][pP]://.*/";
              ...
              HttpClient $CLIENT = ...;
              ...
              HttpRequest $REQ = ...;
              ...
              $CLIENT.send(...);
      - patterns:
          - pattern: |
              URI.create($URI)
          - pattern-inside: |
              String $URI = "=~/[hH][tT][tT][pP]://.*/";
              ...
              HttpClient $CLIENT = ...;
              ...
              HttpRequest $REQ = ...;
              ...
              $CLIENT.sendAsync(...);
    message: Checks for requests sent via HttpClient to http:// URLS. This is dangerous
      because the server is attempting to connect to a website that does not encrypt
      traffic with TLS. Instead, send requests only to https:// URLS.
    fix-regex:
      regex: '[Hh][Tt][Tt][Pp]://'
      replacement: https://
      count: 1
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://openjdk.java.net/groups/net/httpclient/intro.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request
      shortlink: https://sg.run/zv2d
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
  - id: problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request
    message: Checks for requests sent via Apache HTTP Components to http:// URLS. This
      is dangerous because the server is attempting to connect to a website that does
      not encrypt traffic with TLS. Instead, send requests only to https:// URLS.
    fix-regex:
      regex: '[Hh][Tt][Tt][Pp]://'
      replacement: https://
      count: 1
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://hc.apache.org/httpcomponents-client-ga/quickstart.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request
      shortlink: https://sg.run/oxD0
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    pattern-either:
      - pattern: |
          $HTTPCLIENT = HttpClients.$CREATE(...);
          ...
          $HTTPREQ = new $HTTPFUNC("=~/[hH][tT][tT][pP]://.*/");
          ...
          $RESPONSE = $HTTPCLIENT.execute($HTTPREQ);
      - pattern: |
          $HTTPCLIENT = HttpClients.$CREATE(...);
          ...
          $RESPONSE = $HTTPCLIENT.execute(new $HTTPFUNC("=~/[hH][tT][tT][pP]://.*/"));
  - id: problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request
    message: Checks for requests sent via HttpURLConnection and URLObj to http:// URLS.
      This is dangerous because the server is attempting to connect to a website that
      does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.
    fix-regex:
      regex: '[Hh][Tt][Tt][Pp]://'
      replacement: https://
      count: 1
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html
        - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request
      shortlink: https://sg.run/px3Z
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    pattern-either:
      - pattern: |
          URL $URL = new URL ("=~/[Hh][Tt][Tt][Pp]://.*/", ...);
          ...
          $CON = (HttpURLConnection) $URL.openConnection(...);
          ...
          $CON.$FUNC(...);
      - pattern: |
          URL $URL = new URL ("=~/[Hh][Tt][Tt][Pp]://.*/", ...);
          ...
          $CON = $URL.openConnection(...);
          ...
          $CON.$FUNC(...);
  - id: problem-based-packs.insecure-transport.java-stdlib.socket-request.socket-request
    message: Insecure transport rules to catch socket connections to http, telnet, and
      ftp servers. This is dangerous because these are protocols that do not encrypt
      traffic.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.socket-request.socket-request
      shortlink: https://sg.run/2x9L
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.socket-request.socket-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    pattern-either:
      - pattern: |
          $SOCKET = new Socket("=~/[tT][eE][lL][nN][eE][tT]://.*/", ...);
          ...
          $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
          ...
          $OUT.$FUNC(...);
      - pattern: |
          $SOCKET = new Socket("=~/^[fF][tT][pP]://.*/", ...);
          ...
          $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
          ...
          $OUT.$FUNC(...);
      - pattern: |
          $SOCKET = new Socket("=~/[hH][tT][tT][pP]://.*/", ...);
          ...
          $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
          ...
          $OUT.$FUNC(...);
  - id: problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request
    pattern: |
      $TELNETCLIENT = new TelnetClient(...);
      ...
      $TELNETCLIENT.connect(...);
    message: Checks for attempts to connect through telnet. This is insecure as the
      telnet protocol supports no encryption, and data passes through unencrypted.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request
      shortlink: https://sg.run/XBQB
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
  - id: problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation
    pattern: |
      java.lang.System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", true);
    message: Checks for cases where java applications are allowing unsafe renegotiation.
      This leaves the application vulnerable to a man-in-the-middle attack where chosen
      plain text is injected as prefix to a TLS connection.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://www.oracle.com/java/technologies/javase/tlsreadme.html
      category: security
      technology:
        - java
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation
      shortlink: https://sg.run/jR5N
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
  - id: problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request
    message: Checks for requests sent via Unirest to http:// URLS. This is dangerous
      because the server is attempting to connect to a website that does not encrypt
      traffic with TLS. Instead, send requests only to https:// URLS.
    fix-regex:
      regex: '[Hh][Tt][Tt][Pp]://'
      replacement: https://
      count: 1
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://kong.github.io/unirest-java/#requests
      category: security
      technology:
        - unirest
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request
      shortlink: https://sg.run/1Z1G
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - java
    severity: WARNING
    pattern-either:
      - pattern: |
          Unirest.get("=~/[hH][tT][tT][pP]://.*/")
      - pattern: |
          Unirest.post("=~/[hH][tT][tT][pP]://.*/")
  - id: problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
    message: Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED
      to 0, which disables TLS verification. This should only be used for debugging
      purposes. Setting the option rejectUnauthorized to false bypasses verification
      against the list of trusted CAs, which also leads to insecure transport. These
      options lead to vulnerability to MTM attacks, and should not be used.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://nodejs.org/api/https.html#https_https_request_options_callback
        - https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
      shortlink: https://sg.run/9oxr
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
    pattern-either:
      - pattern: |
          process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
      - pattern: |
          {rejectUnauthorized:false}
  - id: problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1
    patterns:
      - pattern-either:
          - pattern-inside: |
              $CONST = require('crypto');
              ...
          - pattern-inside: |
              $CONST = require('constants');
              ...
      - pattern-inside: |
          $HTTPS = require('https');
          ...
      - pattern: |
          $HTTPS.createServer(...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 }, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 }, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 |$CONST.SSL_OP_NO_TLSv1 }, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3}, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1}, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1| $CONST.SSL_OP_NO_SSLv2}, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 }, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 }, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 |$CONST.SSL_OP_NO_TLSv1 }, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3}, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1}, ...).$FUNC(...);
      - pattern-not: |
          $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1| $CONST.SSL_OP_NO_SSLv2}, ...).$FUNC(...);
    message: Detects direct creations of $HTTPS servers that don't disallow SSL v2,
      SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle
      attacks, and other vulnerabilities.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
        - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
        - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1
      shortlink: https://sg.run/ydpP
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2
    patterns:
      - pattern-either:
          - pattern-inside: |
              $CONST = require('crypto');
              ...
          - pattern-inside: |
              $CONST = require('constants');
              ...
      - pattern-inside: |
          $HTTPS = require('https');
          ...
      - pattern: |
          $OPTIONS = {};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2  | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_TLSv1};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2  | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_TLSv1};
          ...
          $HTTPS.createServer($OPTIONS, ...);
      - pattern-not: |
          $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2};
          ...
          $HTTPS.createServer($OPTIONS, ...);
    message: Detects creations of $HTTPS servers from option objects that don't disallow
      SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man
      in the middle attacks, and other vulnerabilities.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
        - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
        - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2
      shortlink: https://sg.run/rdKe
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
      - typescript
  - id: problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request
    patterns:
      - pattern-inside: |
          $X = require('ftp');
          ...
          $C = new $X();
          ...
      - pattern-not-inside: |
          $OPTIONS = {secure: true};
          ...
      - pattern: |
          $C.connect($OPTIONS,...);
      - pattern-not: |
          $C.connect({...,secure: true});
    message: 'Checks for lack of usage of the "secure: true" option when sending ftp
    requests through the nodejs ftp module. This leads to unencrypted traffic being
    sent to the ftp server. There are other options such as "implicit" that still
    does not encrypt all traffic. ftp is the most utilized npm ftp module.'
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://www.npmjs.com/package/ftp
        - https://openbase.io/js/ftp
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request
      shortlink: https://sg.run/b7QW
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
      - typescript
    severity: WARNING
  - id: problem-based-packs.insecure-transport.js-node.http-request.http-request
    patterns:
      - pattern-inside: |
          $HTTP = require('http');
          ...
      - pattern-either:
          - pattern: |
              $HTTP.request("=~/http://.*/",...);
          - pattern: |
              $HTTP.get("=~/http://.*/", ...)
          - pattern: |
              $VAR = new URL("=~/http://.*/");
              ...
              $HTTP.request($VAR, ...);
          - pattern: |
              $VAR = {...,hostname: "..."};
              ...
              $HTTP.request(..., $VAR, ...);
          - pattern: |
              $HTTP.request(..., {...,hostname: "..."}, ...);
      - pattern-not: |
          $VAR = {...,protocol: "https"};
          ...
          $HTTP.request(..., $VAR, ...);
      - pattern-not: |
          $HTTP.request(..., {...,protocol: "https"}, ...);
    message: Checks for requests sent to http:// URLs. This is dangerous as the server
      is attempting to connect to a website that does not encrypt traffic with TLS.
      Instead, only send requests to https:// URLs.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://nodejs.org/api/http.html#http_http_request_options_callback
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.http-request.http-request
      shortlink: https://sg.run/N4Qy
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.http-request.http-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
    severity: WARNING
  - id: problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support
    message: Checks for requests to http (unencrypted) sites using some of node js's
      most popular REST/HTTP libraries, including node-rest-client, axios, and got.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://www.npmjs.com/package/axios
        - https://www.npmjs.com/package/got
        - https://www.npmjs.com/package/node-rest-client
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support
      shortlink: https://sg.run/kXGP
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support
      semgrep.ruleset: owasp-top-ten
    severity: WARNING
    languages:
      - javascript
    patterns:
      - pattern-either:
          - pattern-inside: |
              $CLIENT = require('node-rest-client').Client;
              ...
              $C = new $CLIENT();
              ...
          - pattern-inside: |
              $C = require('axios');
              ...
          - pattern-inside: |
              $C = require('got');
              ...
      - pattern-either:
          - pattern: |
              $C.$REQ("=~/http://.*/", ...)
          - pattern: |
              $C("=~/http://.*/", ...)
          - pattern: |
              $C({...,url: "=~/http://.*/"})
          - pattern: |
              $C.$REQ({...,url: "=~/http://.*/"})
  - id: problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request
    message: Checks for creation of telnet servers or attempts to connect through telnet.
      This is insecure as the telnet protocol supports no encryption, and data passes
      through unencrypted.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://www.npmjs.com/package/telnet
        - https://www.npmjs.com/package/telnet-client
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request
      shortlink: https://sg.run/weoA
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern-inside: |
              $TEL = require('telnet-client');
              ...
              $SERVER = new $TEL();
              ...
          - pattern-inside: |
              $SERVER = require('telnet');
              ...
      - pattern-either:
          - pattern: |
              $SERVER.on(...)
          - pattern: |
              $SERVER.connect(...)
          - pattern: |
              $SERVER.createServer(...)
  - id: problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server
    message: Checks for any usage of http servers instead of https servers. Encourages
      the usage of https protocol instead of http, which does not have TLS and is therefore
      unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker
      is able to read sensitive information.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://nodejs.org/api/http.html#http_class_http_agent
        - https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY
      category: security
      technology:
        - node.js
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server
      shortlink: https://sg.run/x1zL
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server
      semgrep.ruleset: owasp-top-ten
    languages:
      - javascript
    severity: WARNING
    patterns:
      - pattern-inside: |
          $HTTP = require('http');
          ...
      - pattern-either:
          - pattern: |
              $HTTP.$FUNC(...);
          - pattern: |
              new $HTTP.$FUNC2(...);
  - id: typescript.react.security.audit.react-css-injection.react-css-injection
    patterns:
      - pattern-either:
          - pattern-inside: |
              import $STYLE from "...";
              ...
          - pattern-inside: |
              $STYLE = $METHOD(...);
              ...
          - pattern-inside: |
              function $FUNC(...,{$STYLE},...) {
                ...
              }
          - pattern-inside: |
              function $FUNC(...,$STYLE,...) {
                ...
              }
      - pattern-either:
          - pattern: |
              <$EL style={$STYLE} />
          - pattern: |
              $R.createElement($EL, {style: $STYLE}, ...)
      - pattern-not: |
          <$EL style={{$X:...}} />
      - pattern-not: |
          $R.createElement($EL, {style: {...}}, ...)
    message: User controlled data in a `style` attribute is an anti-pattern that can
      lead to XSS vulnerabilities
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-css-injection.react-css-injection
      shortlink: https://sg.run/yze8
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-css-injection.react-css-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml
    pattern-either:
      - pattern: |
          <$X dangerouslySetInnerHTML=... />
      - pattern: |
          {dangerouslySetInnerHTML: ...}
    message: "Setting HTML from code is risky because it\u2019s easy to inadvertently
    expose your users to a cross-site scripting (XSS) attack."
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml
      shortlink: https://sg.run/rAx6
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-href-var.react-href-var
    pattern-either:
      - patterns:
          - pattern: |
              <$EL href=... />
          - pattern-not: |
              <$EL href="..." />
      - patterns:
          - pattern: |
              <Link to=... />
          - pattern-not: |
              <Link to="..." />
      - patterns:
          - pattern: |
              React.createElement($EL, {href: ...})
          - pattern-not: |
              React.createElement($EL, {href: "..."})
      - patterns:
          - pattern: |
              $PARAMS = {href: ...};
          - pattern-not: |
              $PARAMS = {href: "..."};
          - pattern-inside: |
              ...
              React.createElement($EL, $PARAMS);
    message: Detected a variable used in an anchor tag with the 'href' attribute. A
      malicious actor may be able to input the 'javascript:' URI, which could cause
      cross-site scripting (XSS). If you are generating a URL to a known host, hardcode
      the base link (or retrieve it from a configuration) and append the path. You may
      also consider funneling link generation through a safe method which sanitizes
      URLs for the 'javascript:' URI.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#deprecating-javascript-urls
        - https://pragmaticwebsecurity.com/articles/spasecurity/react-xss-part1.html
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-href-var.react-href-var
      shortlink: https://sg.run/bDZZ
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-href-var.react-href-var
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-html-element-spreading.react-html-element-spreading
    patterns:
      - pattern: |
          <$EL {...$PROPS} />
      - metavariable-regex:
          metavariable: $EL
          regex: '[a-z]([a-zA-Z])*'
    message: It is a good practice to avoid spreading for JSX attributes. This prevents
      accidentally passing `dangerouslySetInnerHTML` to an element.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-html-element-spreading.react-html-element-spreading
      shortlink: https://sg.run/Nrdx
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-html-element-spreading.react-html-element-spreading
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-http-leak.react-http-leak
    pattern-either:
      - patterns:
          - pattern: |
              <$EL codebase=... />
          - metavariable-regex:
              metavariable: $EL
              regex: applet|object
          - pattern-not: |
              <$EL codebase="..." />
      - patterns:
          - pattern: |
              <$EL cite=... />
          - metavariable-regex:
              metavariable: $EL
              regex: blockquote|del|ins|q
          - pattern-not: |
              <$EL cite="..." />
      - patterns:
          - pattern: |
              <$EL longdesc=... />
          - metavariable-regex:
              metavariable: $EL
              regex: frame|iframe|img
          - pattern-not: |
              <$EL longdesc="..." />
      - patterns:
          - pattern: |
              <$EL src={$INJECT} />
          - metavariable-regex:
              metavariable: $EL
              regex: frame|iframe|img|input|script|audio|source|track|embed|video
          - pattern-not: |
              <$EL src="..." />
          - pattern-not-inside: |
              import $INJECT from "...";
              ...
      - patterns:
          - pattern: |
              <$EL usemap=... />
          - metavariable-regex:
              metavariable: $EL
              regex: img|input|object
          - pattern-not: |
              <$EL usemap="..." />
      - patterns:
          - pattern: |
              <$EL formaction=... />
          - metavariable-regex:
              metavariable: $EL
              regex: button|input
          - pattern-not: |
              <$EL formaction="..." />
      - patterns:
          - pattern: |
              <$EL srcset=... />
          - metavariable-regex:
              metavariable: $EL
              regex: img|source
          - pattern-not: |
              <$EL srcset="..." />
      - patterns:
          - pattern: |
              <$EL archive=... />
          - metavariable-regex:
              metavariable: $EL
              regex: object|applet
          - pattern-not: |
              <$EL archive="..." />
      - patterns:
          - pattern: |
              <body background=... />
          - pattern-not: |
              <body background="..." />
      - patterns:
          - pattern: |
              <form action=... />
          - pattern-not: |
              <form action="..." />
      - patterns:
          - pattern: |
              <head profile=... />
          - pattern-not: |
              <head profile="..." />
      - patterns:
          - pattern: |
              <object $ATTR=... />
          - metavariable-regex:
              metavariable: $ATTR
              regex: classid|data
          - pattern-not: |
              <object $ATTR="..." />
      - patterns:
          - pattern: |
              <video poster=... />
          - pattern-not: |
              <video poster="..." />
      - patterns:
          - pattern: |
              <command icon=... />
          - pattern-not: |
              <command icon="..." />
      - patterns:
          - pattern: |
              <html manifest=... />
          - pattern-not: |
              <html manifest="..." />
      - patterns:
          - pattern: |
              <meta content=... />
          - pattern-not: |
              <meta content="..." />
    message: This HTML element '$EL' and attribute '$ATTR' together may load an external
      resource. This means that if dynamic content can enter this attribute it may be
      possible for an attacker to send HTTP requests to unintended locations which may
      leak data about your users. If this element is reaching out to a known host, consider
      hardcoding the host (or loading from a configuration) and appending the dynamic
      path. See https://github.com/cure53/HTTPLeaks for more information.
    metadata:
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
      references:
        - https://github.com/cure53/HTTPLeaks
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-http-leak.react-http-leak
      shortlink: https://sg.run/kLbX
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-http-leak.react-http-leak
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-missing-noopener.react-missing-noopener
    pattern-either:
      - patterns:
          - pattern: |
              <$X target="_blank" />
          - pattern-not: |
              <$X target="_blank" rel="..." />
      - patterns:
          - pattern-inside: |
              <$X target="_blank" rel=... />
          - pattern-regex: rel=["']((?!noopener).)*?["']
      - patterns:
          - pattern: |
              React.createElement($A, {target: '_blank'},...)
          - pattern-not: |
              React.createElement($A, {rel: '...'},...)
      - patterns:
          - pattern: |
              React.createElement($A, {target: '_blank', rel: $REL},...)
          - metavariable-regex:
              metavariable: $REL
              regex: '["'']((?!noopener).)*?[''"]'
      - patterns:
          - pattern: |
              $P = {target: '_blank'};
              ...
              React.createElement($A, $P,...);
          - pattern-not: |
              $P = {rel: '...'};
              ...
              React.createElement($A, $P,...);
      - patterns:
          - pattern: |
              $P = {target: '_blank', rel: $REL};
              ...
              React.createElement($A, $P,...);
          - metavariable-regex:
              metavariable: $REL
              regex: '["'']((?!noopener).)*?[''"]'
    message: Missing 'noopener' on an anchor tag where target='_blank'. This could introduce
      a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.
    metadata:
      cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
      owasp: 'A3: Sensitive Data Exposure'
      references:
        - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
        - https://web.dev/external-anchors-use-rel-noopener/
        - https://owasp.org/www-community/attacks/Reverse_Tabnabbing
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-missing-noopener.react-missing-noopener
      shortlink: https://sg.run/O19e
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-missing-noopener.react-missing-noopener
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-missing-noreferrer.react-missing-noreferrer
    pattern-either:
      - patterns:
          - pattern: |
              <$X target="_blank" />
          - pattern-not: |
              <$X target="_blank" rel="..." />
          - pattern-not: |
              <$X href="=~/^\/[^\/]/i" />
          - pattern-not: |
              <$X to="=~/^\/[^\/]/i" />
      - patterns:
          - pattern-inside: |
              <$X target="_blank" rel=... />
          - pattern-not-inside: |
              <$X href="=~/^\/[^\/]/i" rel=... />
          - pattern-not-inside: |
              <$X to="=~/^\/[^\/]/i" rel=... />
          - pattern-regex: rel=["']((?!noreferrer).)*?["']
      - patterns:
          - pattern: |
              React.createElement($A, {target: '_blank'},...)
          - pattern-not: |
              React.createElement($A, {rel: '...'},...)
          - pattern-not: |
              React.createElement($A, {href: '=~/^\/[^\/]/i'},...)
      - patterns:
          - pattern: |
              React.createElement($A, {target: '_blank', rel: $REL},...)
          - pattern-not: |
              React.createElement($A, {href: '=~/^\/[^\/]/i'},...)
          - metavariable-regex:
              metavariable: $REL
              regex: '["'']((?!noreferrer).)*?[''"]'
      - patterns:
          - pattern: |
              $P = {target: '_blank'};
              ...
              React.createElement($A, $P,...);
          - pattern-not: |
              $P = {rel: '...'};
              ...
              React.createElement($A, $P,...);
          - pattern-not: |
              $P = {href: '=~/^\/[^\/]/i'};
              ...
              React.createElement($A, $P,...);
      - patterns:
          - pattern: |
              $P = {target: '_blank', rel: $REL};
              ...
              React.createElement($A, $P,...);
          - pattern-not: |
              $P = {href: '=~/^\/[^\/]/i'};
              ...
              React.createElement($A, $P,...);
          - metavariable-regex:
              metavariable: $REL
              regex: '["'']((?!noreferrer).)*?[''"]'
    message: This anchor tag with 'target="_blank"' is missing 'noreferrer'. A page
      opened with 'target="_blank"' can access the window object of the origin page.
      This means it can manipulate the 'window.opener' property, which could redirect
      the origin page to a malicious URL. This is called reverse tabnabbing. To prevent
      this, include 'rel=noreferrer' on this tag.
    metadata:
      cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
      owasp: 'A3: Sensitive Data Exposure'
      references:
        - https://web.dev/external-anchors-use-rel-noopener/
        - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-missing-noreferrer.react-missing-noreferrer
      shortlink: https://sg.run/e41X
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-missing-noreferrer.react-missing-noreferrer
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-no-refs.react-no-refs
    pattern-either:
      - pattern: <$EL ref=... />
      - pattern: $REACT.createRef(...)
      - pattern: $REACT.useRef(...)
      - pattern: createRef(...)
      - pattern: useRef(...)
    message: '`ref` usage found, refs give direct DOM access and may create a possibility
    for XSS'
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-no-refs.react-no-refs
      shortlink: https://sg.run/v0dX
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-no-refs.react-no-refs
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-props-injection.react-props-injection
    patterns:
      - pattern-either:
          - pattern-inside: |
              import $PROPS from "...";
              ...
          - pattern-inside: |
              $PROPS = $METHOD(...);
              ...
          - pattern-inside: |
              function $FUNC(...,$PROPS,...) {
                ...
              }
      - pattern-either:
          - pattern: |
              <$EL {...<... $PROPS ...>} />
          - pattern: |
              <$EL {...$F(<... $PROPS ...>)} />
          - pattern: |
              React.createElement($EL, <... $PROPS ...>)
          - pattern: |
              React.createElement($EL, $F(<... $PROPS ...>))
    message: Inject arbitrary props into the new element. It may introduce an XSS vulnerability.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://medium.com/dailyjs/exploiting-script-injection-flaws-in-reactjs-883fb1fe36c1
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-props-injection.react-props-injection
      shortlink: https://sg.run/dg6P
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-props-injection.react-props-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-styled-components-injection.react-styled-components-injection
    patterns:
      - pattern-inside: |
          import styled from 'styled-components';
          ...
      - pattern-not-inside: |
          import { keyframes } from 'styled-components';
          ...
          $STYLE = keyframes(...);
          ...
      - pattern-either:
          - pattern-inside: |
              $STYLE = $METHOD(...);
              ...
          - pattern-inside: |
              function $FUNC(...,{$STYLE},...) {
                ...
              }
          - pattern-inside: |
              function $FUNC(...,$STYLE,...) {
                ...
              }
          - pattern-inside: |
              function $FUNC(...,{$INPUT},...) {
                ...
                $STYLE = <... $INPUT ...>;
                ...
              }
          - pattern-inside: |
              function $FUNC(...,$INPUT,...) {
                ...
                $STYLE = <... $INPUT ...>;
                ...
              }
      - pattern: |
          styled.$EL`...${$STYLE}...`
    message: User controlled data in a styled component's css is an anti-pattern that
      can lead to XSS vulnerabilities
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://styled-components.com/docs/advanced#security
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-styled-components-injection.react-styled-components-injection
      shortlink: https://sg.run/nqWG
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-styled-components-injection.react-styled-components-injection
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method
    patterns:
      - pattern-either:
          - pattern: $EL.insertAdjacentHTML($P, ...)
          - pattern: document.write(...)
          - pattern: document.writeln(...)
      - pattern-not: $EL.insertAdjacentHTML($P, "...")
      - pattern-not: document.write("...")
      - pattern-not: document.writeln("...")
    message: User controlled data in a insertAdjacentHTML, document.write or document.writeln
      is an anti-pattern that can lead to XSS vulnerabilities
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method
      shortlink: https://sg.run/E5x8
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property
    patterns:
      - pattern-either:
          - pattern: |
              $X.innerHTML = ...;
          - pattern: |
              $X.outerHTML = ...;
      - pattern-not: |
          $X.innerHTML = "...";
      - pattern-not: |
          $X.outerHTML = "...";
    message: User controlled data in a `$X` is an anti-pattern that can lead to XSS
      vulnerabilities
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property
      shortlink: https://sg.run/70Zv
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.audit.react-unsanitized-property.react-unsanitized-property
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: typescript.react.security.react-insecure-request.react-insecure-request
    message: Unencrypted request over HTTP detected.
    metadata:
      vulnerability: Insecure Transport
      owasp: 'A3: Sensitive Data Exposure'
      cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
      references:
        - https://www.npmjs.com/package/axios
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request
      shortlink: https://sg.run/1n0b
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: ERROR
    pattern-either:
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $AXIOS from 'axios';
                  ...
                  $AXIOS.$METHOD(...)
              - pattern-inside: |
                  $AXIOS = require('axios');
                  ...
                  $AXIOS.$METHOD(...)
          - pattern-either:
              - pattern: $AXIOS.get("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
              - pattern: $AXIOS.post("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
              - pattern: $AXIOS.delete("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
              - pattern: $AXIOS.head("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
              - pattern: $AXIOS.patch("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
              - pattern: $AXIOS.put("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
              - pattern: $AXIOS.options("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - patterns:
          - pattern-either:
              - pattern-inside: |
                  import $AXIOS from 'axios';
                  ...
                  $AXIOS(...)
              - pattern-inside: |
                  $AXIOS = require('axios');
                  ...
                  $AXIOS(...)
          - pattern-either:
              - pattern: '$AXIOS({url: "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"}, ...)'
              - pattern: |
                  $OPTS = {url: "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"}
                  ...
                  $AXIOS($OPTS, ...)
      - pattern: fetch("=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
  - id: typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
    patterns:
      - pattern-either:
          - pattern-inside: |
              $X = require('react-markdown/with-html');
              ...
          - pattern-inside: |
              $X = require('react-markdown');
              ...
          - pattern-inside: |
              import 'react-markdown/with-html';
              ...
          - pattern-inside: |
              import 'react-markdown';
              ...
      - pattern-either:
          - pattern: |
              <$EL allowDangerousHtml />
          - pattern: |
              <$EL transformLinkUri=... />
          - pattern: |
              <$EL transformImageUri=... />
    message: Overwriting `transformLinkUri` or `transformImageUri` to something insecure
      or turning `allowDangerousHtml` on, will open code up to XSS vectors.
    metadata:
      cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
      owasp: 'A7: Cross-Site Scripting (XSS)'
      references:
        - https://www.npmjs.com/package/react-markdown#security
      category: security
      technology:
        - react
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
      shortlink: https://sg.run/9qAk
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
      semgrep.ruleset: owasp-top-ten
    languages:
      - typescript
      - javascript
    severity: WARNING
  - id: generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value
    pattern-regex: (A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
    languages:
      - regex
    message: AWS Access Key ID Value detected
    severity: ERROR
    metadata:
      source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
      category: security
      technology:
        - secrets
        - aws
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      source: https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value
      shortlink: https://sg.run/GeD1
      dev.semgrep.actions: *id001
      semgrep.policy:
        id: 21543
        name: owasp-top-ten-java
        slug: owasp-top-ten-java
      semgrep.url: https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value