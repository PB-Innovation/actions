name: deploy-service
author: "Pərvin Yaqubzadə"
description: "Deploy service to Kubernetes Cluster"

inputs:
  java-distribution:
    description: "Java distribution to use"
    required: false
    default: "temurin"
  java-version:
    description: "Java version to use"
    required: false
    default: "17"
  gradle-version:
    description: 'Gradle version'
    required: false
    default: 'wrapper'
  gradle-debug-cache:
    description: 'Debug output for gradle cache'
    required: false
    default: 'true'
  env-context:
    description: 'Environment variables used in jobs'
    required: true
  k8s-context:
    description: 'Encoded Kubernetes Cluster context'
    required: true
  github-token:
    description: 'GitHub private access token for authorization'
    required: true
  aws-access-key-id:
    description: 'AWS account access key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS account secret access key'
    required: true

runs:
  using: composite
  steps:
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}

    - name: Build the application
      uses: gradle/gradle-build-action@v2.2.2
      env:
        GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: ${{ inputs.gradle-debug-cache }}
      with:
        gradle-version: ${{ inputs.gradle-version }}
        arguments: bootJar
        cache-read-only: false

    - name: Change backend config and environment variables
      shell: sh
      run: |
        echo "${{ inputs.env-context }}" >> $GITHUB_ENV
        echo "${{ inputs.env-context }}" | sed 's/\(.*\)=/::add-mask::/' | sed 's/\"//g'

    - uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.23.6'
      id: install

    - name: Use dev kubectl context
      env:
        KUBE_CONFIG_DATA: ${{ inputs.k8s-context }}
      shell: sh
      run: |
        mkdir ~/.kube
        echo $KUBE_CONFIG_DATA | base64 --decode > ~/.kube/config

    - name: Install AWS IAM
      uses: woofenator/action-aws-iam-authenticator@master
      id: install-aws-iam

    - name: Get Helm chart from Git repository
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.github-token }}
        repository: PB-Innovation/infra-helm-chart
        ref: master
        path: infra-helm-chart

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR Repository if does not exists
      shell: sh
      run: aws ecr create-repository --repository-name ${{ github.event.repository.name }} || true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        IMAGE_TAG: ${{ github.sha }}
      shell: sh
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Helm template
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        IMAGE_TAG: ${{ github.sha }}
      shell: sh
      run: >
        helm template ./infra-helm-chart/k8s-helm-chart/
        -f ./infra-helm-chart/k8s-helm-chart/dev/values.yaml
        -f ./infra/values-ms.yaml
        --set clusterEnvironment="dev"
        --set serviceImage="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > release.yaml

    - name: Apply release YAML script to Kubernetes
      shell: sh
      run: kubectl apply -f release.yaml