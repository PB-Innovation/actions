on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment which service going to be deployed'
        required: true
        type: string
      platform-url:
        description: 'URL of service which is going to be shown in deployments tab in GitHub'
        required: false
        type: string
        default: 'https://google.com'
      java-distribution:
        description: 'Java distribution to use'
        required: false
        default: 'temurin'
        type: string
      java-version:
        description: 'Java version to use'
        required: false
        default: '17'
        type: string
      gradle-version:
        description: 'Gradle version'
        required: false
        default: 'wrapper'
        type: string
      gradle-debug-cache:
        description: 'Debug output for gradle cache'
        required: false
        default: true
        type: string
    secrets:
      github-token:
        required: true
      kube-config:
        required: true
      aws-region:
        required: true
      aws-access-key:
        required: true
      aws-secret-key:
        required: true

jobs:
  deploy:
    name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: sh
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.platform-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Build the application
        uses: gradle/gradle-build-action@v2.2.2
        env:
          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: ${{ inputs.gradle-debug-cache }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          arguments: bootJar
          cache-read-only: false

      - uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.23.6'
        id: install

      - name: Apply Kube configuration
        env:
          KUBE_CONFIG_DATA: ${{ secrets.kube-config }}
        run: |
          mkdir ~/.kube
          echo $KUBE_CONFIG_DATA | base64 --decode > ~/.kube/config

      - name: Install AWS IAM
        uses: woofenator/action-aws-iam-authenticator@1.0.4
        id: install-aws-iam

      - name: Get Helm chart from Git repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.github-token }}
          repository: PB-Innovation/infra-helm-chart
          ref: master
          path: infra-helm-chart

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key }}
          aws-secret-access-key: ${{ secrets.aws-secret-key }}
          aws-region: ${{ secrets.aws-region }}

      - name: Create ECR Repository if does not exists
        run: aws ecr create-repository --repository-name ${{ github.event.repository.name }} || true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Helm template
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: >
          helm template ./infra-helm-chart/k8s-helm-chart/
          -f ./infra-helm-chart/k8s-helm-chart/${{ fromJSON('["prod", "dev"]')[inputs.environment == 'Development'] }}/values.yaml
          -f ./infra/values-ms.yaml
          --set serviceImage="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > release.yaml

      - name: Apply release YAML script to Kubernetes
        run: kubectl apply -f release.yaml